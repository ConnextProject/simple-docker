this.window = this.window || {};
this.window.types = (function (exports, ethers, EventEmitter) {
  'use strict';

  EventEmitter = EventEmitter && Object.prototype.hasOwnProperty.call(EventEmitter, 'default') ? EventEmitter['default'] : EventEmitter;

  const JsonRpcProvider = ethers.providers.JsonRpcProvider;
  const BigNumber = ethers.BigNumber;

  const enumify = (x) => x;
  const tidy = (str) => `${str.replace(/\n/g, "").replace(/ +/g, " ")}`;

  const MethodNames = enumify({
      chan_create: "chan_create",
      chan_deployStateDepositHolder: "chan_deployStateDepositHolder",
      chan_getAppInstance: "chan_getAppInstance",
      chan_getAppInstances: "chan_getAppInstances",
      chan_getChannelAddresses: "chan_getChannelAddresses",
      chan_getFreeBalanceState: "chan_getFreeBalanceState",
      chan_getProposedAppInstance: "chan_getProposedAppInstance",
      chan_getProposedAppInstances: "chan_getProposedAppInstances",
      chan_getStateChannel: "chan_getStateChannel",
      chan_getStateDepositHolderAddress: "chan_getStateDepositHolderAddress",
      chan_getTokenIndexedFreeBalanceStates: "chan_getTokenIndexedFreeBalanceStates",
      chan_install: "chan_install",
      chan_proposeInstall: "chan_proposeInstall",
      chan_rejectInstall: "chan_rejectInstall",
      chan_sync: "chan_sync",
      chan_takeAction: "chan_takeAction",
      chan_uninstall: "chan_uninstall",
      chan_withdraw: "chan_withdraw",
      chan_withdrawCommitment: "chan_withdrawCommitment",
  });

  const ChannelMethods = enumify(Object.assign(Object.assign({}, MethodNames), { chan_isSigner: "chan_isSigner", chan_config: "chan_config", chan_enable: "chan_enable", chan_signMessage: "chan_signMessage", chan_encrypt: "chan_encrypt", chan_decrypt: "chan_decrypt", chan_restoreState: "chan_restoreState", chan_getUserWithdrawal: "chan_getUserWithdrawal", chan_setUserWithdrawal: "chan_setUserWithdrawal", chan_setStateChannel: "chan_setStateChannel", chan_walletDeposit: "chan_walletDeposit", chan_getSchemaVersion: "chan_getSchemaVersion", chan_updateSchemaVersion: "chan_updateSchemaVersion" }));
  class ConnextEventEmitter extends EventEmitter {
  }

  const CommitmentTypes = enumify({
      Conditional: "conditional",
      SetState: "setState",
      Setup: "setup",
      Withdraw: "withdraw",
  });

  const { AddressZero } = ethers.constants;
  const ETHEREUM_NAMESPACE = "ethereum";
  const GANACHE_CHAIN_ID = 1337;
  const CONVENTION_FOR_ETH_ASSET_ID = AddressZero;
  const CF_METHOD_TIMEOUT = 11000;
  const NATS_TIMEOUT = 60000;
  const NATS_ATTEMPTS = 1;

  const EXPECTED_CONTRACT_NAMES_IN_NETWORK_CONTEXT = [
      "ChallengeRegistry",
      "ConditionalTransactionDelegateTarget",
      "DepositApp",
      "IdentityApp",
      "MinimumViableMultisig",
      "MultiAssetMultiPartyCoinTransferInterpreter",
      "ProxyFactory",
      "SingleAssetTwoPartyCoinTransferInterpreter",
      "TimeLockedPassThrough",
      "TwoPartyFixedOutcomeInterpreter",
  ];
  const singleAssetTwoPartyCoinTransferEncoding = tidy(`tuple(
  address to,
  uint256 amount
)[2]`);
  const multiAssetMultiPartyCoinTransferEncoding = tidy(`tuple(
  address to,
  uint256 amount
)[][]`);
  const OutcomeType = enumify({
      TWO_PARTY_FIXED_OUTCOME: "TWO_PARTY_FIXED_OUTCOME",
      MULTI_ASSET_MULTI_PARTY_COIN_TRANSFER: "MULTI_ASSET_MULTI_PARTY_COIN_TRANSFER",
      SINGLE_ASSET_TWO_PARTY_COIN_TRANSFER: "SINGLE_ASSET_TWO_PARTY_COIN_TRANSFER",
  });
  const CommitmentTarget = enumify({
      MULTISIG: "0",
      SET_STATE: "1",
      CANCEL_DISPUTE: "2",
  });

  const DepositAppName = "DepositApp";
  const DepositAppStateEncoding = tidy(`tuple(
  ${singleAssetTwoPartyCoinTransferEncoding} transfers,
  address multisigAddress,
  address assetId,
  uint256 startingTotalAmountWithdrawn,
  uint256 startingMultisigBalance
)`);

  const HashLockTransferAppName = "HashLockTransferApp";
  const HashLockTransferAppStateEncoding = tidy(`tuple(
  ${singleAssetTwoPartyCoinTransferEncoding} coinTransfers,
  bytes32 lockHash,
  bytes32 preImage,
  uint256 expiry,
  bool finalized
)`);
  const HashLockTransferAppActionEncoding = tidy(`tuple(
  bytes32 preImage
)`);

  const SimpleLinkedTransferAppName = "SimpleLinkedTransferApp";
  const SimpleLinkedTransferAppStateEncoding = tidy(`tuple(
  ${singleAssetTwoPartyCoinTransferEncoding} coinTransfers,
  bytes32 linkedHash,
  bytes32 preImage,
  bool finalized
)`);
  const SimpleLinkedTransferAppActionEncoding = tidy(`tuple(
  bytes32 preImage
)`);

  const SimpleTwoPartySwapAppName = "SimpleTwoPartySwapApp";
  const SimpleSwapAppStateEncoding = tidy(`tuple(
  ${multiAssetMultiPartyCoinTransferEncoding} coinTransfers
)`);

  const WithdrawAppName = "WithdrawApp";
  const WithdrawAppStateEncoding = tidy(`tuple(
  ${singleAssetTwoPartyCoinTransferEncoding} transfers,
  bytes[2] signatures,
  address[2] signers,
  bytes32 data,
  bytes32 nonce,
  bool finalized
)`);
  const WithdrawAppActionEncoding = tidy(`tuple(
  bytes signature
)`);

  const SimpleSignedTransferAppName = "SimpleSignedTransferApp";
  const SimpleSignedTransferAppStateEncoding = tidy(`tuple(
  ${singleAssetTwoPartyCoinTransferEncoding} coinTransfers,
  address signerAddress,
  uint256 chainId,
  address verifyingContract,
  bytes32 requestCID,
  bytes32 subgraphDeploymentID,
  bytes32 paymentId,
  bool finalized
)`);
  const SimpleSignedTransferAppActionEncoding = tidy(`tuple(
  bytes32 responseCID,
  bytes signature
)`);

  (function (ChallengeStatus) {
      ChallengeStatus[ChallengeStatus["NO_CHALLENGE"] = 0] = "NO_CHALLENGE";
      ChallengeStatus[ChallengeStatus["IN_DISPUTE"] = 1] = "IN_DISPUTE";
      ChallengeStatus[ChallengeStatus["IN_ONCHAIN_PROGRESSION"] = 2] = "IN_ONCHAIN_PROGRESSION";
      ChallengeStatus[ChallengeStatus["EXPLICITLY_FINALIZED"] = 3] = "EXPLICITLY_FINALIZED";
      ChallengeStatus[ChallengeStatus["OUTCOME_SET"] = 4] = "OUTCOME_SET";
  })(exports.ChallengeStatus || (exports.ChallengeStatus = {}));
  const StateProgressedEventName = "StateProgressed";
  const ChallengeUpdatedEventName = "ChallengeUpdated";
  const ChallengeEvents = {
      [ChallengeUpdatedEventName]: ChallengeUpdatedEventName,
      [StateProgressedEventName]: StateProgressedEventName,
  };

  const multiAssetMultiPartyCoinTransferInterpreterParamsEncoding = tidy(`tuple(
  uint256[] limit,
  address[] tokenAddresses
)`);
  const singleAssetTwoPartyCoinTransferInterpreterParamsEncoding = tidy(`tuple(
  uint256 limit,
  address tokenAddress
)`);
  const twoPartyFixedOutcomeInterpreterParamsEncoding = tidy(`tuple(
  address[2] playerAddrs,
  uint256 amount,
  address tokenAddress
)`);
  (function (TwoPartyFixedOutcome) {
      TwoPartyFixedOutcome[TwoPartyFixedOutcome["SEND_TO_ADDR_ONE"] = 0] = "SEND_TO_ADDR_ONE";
      TwoPartyFixedOutcome[TwoPartyFixedOutcome["SEND_TO_ADDR_TWO"] = 1] = "SEND_TO_ADDR_TWO";
      TwoPartyFixedOutcome[TwoPartyFixedOutcome["SPLIT_AND_SEND_TO_BOTH_ADDRS"] = 2] = "SPLIT_AND_SEND_TO_BOTH_ADDRS";
  })(exports.TwoPartyFixedOutcome || (exports.TwoPartyFixedOutcome = {}));
  (function (MultisigOperation) {
      MultisigOperation[MultisigOperation["Call"] = 0] = "Call";
      MultisigOperation[MultisigOperation["DelegateCall"] = 1] = "DelegateCall";
  })(exports.MultisigOperation || (exports.MultisigOperation = {}));

  const GenericConditionalTransferAppName = "GenericConditionalTransferApp";
  const AppNames = {
      [DepositAppName]: DepositAppName,
      [HashLockTransferAppName]: HashLockTransferAppName,
      [SimpleLinkedTransferAppName]: SimpleLinkedTransferAppName,
      [SimpleSignedTransferAppName]: SimpleSignedTransferAppName,
      [SimpleTwoPartySwapAppName]: SimpleTwoPartySwapAppName,
      [WithdrawAppName]: WithdrawAppName,
      [GenericConditionalTransferAppName]: GenericConditionalTransferAppName,
  };
  const SupportedApplicationNames = enumify({
      [SimpleLinkedTransferAppName]: SimpleLinkedTransferAppName,
      [SimpleSignedTransferAppName]: SimpleSignedTransferAppName,
      [SimpleTwoPartySwapAppName]: SimpleTwoPartySwapAppName,
      [WithdrawAppName]: WithdrawAppName,
      [HashLockTransferAppName]: HashLockTransferAppName,
      [DepositAppName]: DepositAppName,
  });

  const CONDITIONAL_TRANSFER_CREATED_EVENT = "CONDITIONAL_TRANSFER_CREATED_EVENT";
  const CONDITIONAL_TRANSFER_UNLOCKED_EVENT = "CONDITIONAL_TRANSFER_UNLOCKED_EVENT";
  const CONDITIONAL_TRANSFER_FAILED_EVENT = "CONDITIONAL_TRANSFER_FAILED_EVENT";
  const CREATE_CHANNEL_EVENT = "CREATE_CHANNEL_EVENT";
  const SETUP_FAILED_EVENT = "SETUP_FAILED_EVENT";
  const DEPOSIT_CONFIRMED_EVENT = "DEPOSIT_CONFIRMED_EVENT";
  const DEPOSIT_FAILED_EVENT = "DEPOSIT_FAILED_EVENT";
  const DEPOSIT_STARTED_EVENT = "DEPOSIT_STARTED_EVENT";
  const INSTALL_EVENT = "INSTALL_EVENT";
  const INSTALL_FAILED_EVENT = "INSTALL_FAILED_EVENT";
  const PROPOSE_INSTALL_EVENT = "PROPOSE_INSTALL_EVENT";
  const PROPOSE_INSTALL_FAILED_EVENT = "PROPOSE_INSTALL_FAILED_EVENT";
  const PROTOCOL_MESSAGE_EVENT = "PROTOCOL_MESSAGE_EVENT";
  const REJECT_INSTALL_EVENT = "REJECT_INSTALL_EVENT";
  const UNINSTALL_EVENT = "UNINSTALL_EVENT";
  const UNINSTALL_FAILED_EVENT = "UNINSTALL_FAILED_EVENT";
  const UPDATE_STATE_EVENT = "UPDATE_STATE_EVENT";
  const UPDATE_STATE_FAILED_EVENT = "UPDATE_STATE_FAILED_EVENT";
  const WITHDRAWAL_CONFIRMED_EVENT = "WITHDRAWAL_CONFIRMED_EVENT";
  const WITHDRAWAL_FAILED_EVENT = "WITHDRAWAL_FAILED_EVENT";
  const WITHDRAWAL_STARTED_EVENT = "WITHDRAWAL_STARTED_EVENT";
  const SYNC_EVENT = "SYNC";
  const SYNC_FAILED_EVENT = "SYNC_FAILED_EVENT";
  const EventNames = {
      [CONDITIONAL_TRANSFER_CREATED_EVENT]: CONDITIONAL_TRANSFER_CREATED_EVENT,
      [CONDITIONAL_TRANSFER_UNLOCKED_EVENT]: CONDITIONAL_TRANSFER_UNLOCKED_EVENT,
      [CONDITIONAL_TRANSFER_FAILED_EVENT]: CONDITIONAL_TRANSFER_FAILED_EVENT,
      [CREATE_CHANNEL_EVENT]: CREATE_CHANNEL_EVENT,
      [SETUP_FAILED_EVENT]: SETUP_FAILED_EVENT,
      [DEPOSIT_CONFIRMED_EVENT]: DEPOSIT_CONFIRMED_EVENT,
      [DEPOSIT_FAILED_EVENT]: DEPOSIT_FAILED_EVENT,
      [DEPOSIT_STARTED_EVENT]: DEPOSIT_STARTED_EVENT,
      [INSTALL_EVENT]: INSTALL_EVENT,
      [INSTALL_FAILED_EVENT]: INSTALL_FAILED_EVENT,
      [PROPOSE_INSTALL_EVENT]: PROPOSE_INSTALL_EVENT,
      [PROPOSE_INSTALL_FAILED_EVENT]: PROPOSE_INSTALL_FAILED_EVENT,
      [PROTOCOL_MESSAGE_EVENT]: PROTOCOL_MESSAGE_EVENT,
      [REJECT_INSTALL_EVENT]: REJECT_INSTALL_EVENT,
      [SYNC_EVENT]: SYNC_EVENT,
      [SYNC_FAILED_EVENT]: SYNC_FAILED_EVENT,
      [UNINSTALL_EVENT]: UNINSTALL_EVENT,
      [UNINSTALL_FAILED_EVENT]: UNINSTALL_FAILED_EVENT,
      [UPDATE_STATE_EVENT]: UPDATE_STATE_EVENT,
      [UPDATE_STATE_FAILED_EVENT]: UPDATE_STATE_FAILED_EVENT,
      [WITHDRAWAL_CONFIRMED_EVENT]: WITHDRAWAL_CONFIRMED_EVENT,
      [WITHDRAWAL_FAILED_EVENT]: WITHDRAWAL_FAILED_EVENT,
      [WITHDRAWAL_STARTED_EVENT]: WITHDRAWAL_STARTED_EVENT,
  };

  const ProtocolRoles = enumify({
      initiator: "initiator",
      responder: "responder",
  });

  const PriceOracleTypes = enumify({
      UNISWAP: "UNISWAP",
      HARDCODED: "HARDCODED",
  });

  (function (Opcode) {
      Opcode[Opcode["IO_SEND"] = 0] = "IO_SEND";
      Opcode[Opcode["IO_SEND_AND_WAIT"] = 1] = "IO_SEND_AND_WAIT";
      Opcode[Opcode["OP_SIGN"] = 2] = "OP_SIGN";
      Opcode[Opcode["PERSIST_APP_INSTANCE"] = 3] = "PERSIST_APP_INSTANCE";
      Opcode[Opcode["PERSIST_STATE_CHANNEL"] = 4] = "PERSIST_STATE_CHANNEL";
      Opcode[Opcode["OP_VALIDATE"] = 5] = "OP_VALIDATE";
  })(exports.Opcode || (exports.Opcode = {}));
  const ProtocolNames = enumify({
      install: "install",
      propose: "propose",
      setup: "setup",
      sync: "sync",
      takeAction: "takeAction",
      uninstall: "uninstall",
  });

  const StateSchemaVersion = 2;

  const ConnextNodeStorePrefix = "INDRA_NODE_CF_CORE";
  const ConnextClientStorePrefix = "INDRA_CLIENT_CF_CORE";
  const STORE_SCHEMA_VERSION = 1;

  const RequireOnlineAppNames = [
      SupportedApplicationNames.HashLockTransferApp,
  ];
  const AllowOfflineAppNames = [
      SupportedApplicationNames.SimpleSignedTransferApp,
      SupportedApplicationNames.SimpleLinkedTransferApp,
  ];
  const getTransferTypeFromAppName = (name) => {
      if (RequireOnlineAppNames.includes(name)) {
          return "RequireOnline";
      }
      if (AllowOfflineAppNames.includes(name)) {
          return "AllowOffline";
      }
      return undefined;
  };
  const ConditionalTransferTypes = enumify({
      HashLockTransfer: HashLockTransferAppName,
      LinkedTransfer: SimpleLinkedTransferAppName,
      SignedTransfer: SimpleSignedTransferAppName,
  });
  const ConditionalTransferAppNames = enumify({
      [HashLockTransferAppName]: HashLockTransferAppName,
      [SimpleLinkedTransferAppName]: SimpleLinkedTransferAppName,
      [SimpleSignedTransferAppName]: SimpleSignedTransferAppName,
      [GenericConditionalTransferAppName]: GenericConditionalTransferAppName,
  });
  const LinkedTransferStatus = enumify({
      PENDING: "PENDING",
      COMPLETED: "COMPLETED",
      FAILED: "FAILED",
  });
  const HashLockTransferStatus = enumify({
      PENDING: "PENDING",
      EXPIRED: "EXPIRED",
      COMPLETED: "COMPLETED",
      FAILED: "FAILED",
  });
  const SignedTransferStatus = enumify({
      PENDING: "PENDING",
      COMPLETED: "COMPLETED",
      FAILED: "FAILED",
  });

  const ChallengeProgressedEvent = "ChallengeProgressedEvent";
  const ChallengeProgressionFailedEvent = "ChallengeProgressionFailedEvent";
  const ChallengeCompletedEvent = "ChallengeCompletedEvent";
  const ChallengeCompletionFailedEvent = "ChallengeCompletionFailedEvent";
  const ChallengeOutcomeSetEvent = "ChallengeOutcomeSetEvent";
  const ChallengeOutcomeFailedEvent = "ChallengeOutcomeFailedEvent";
  const ChallengeCancelledEvent = "ChallengeCancelledEvent";
  const ChallengeCancellationFailedEvent = "ChallengeCancellationFailedEvent";
  const ChallengeUpdatedEvent = "ChallengeUpdatedEvent";
  const StateProgressedEvent = "StateProgressedEvent";
  const WatcherEvents = {
      [ChallengeUpdatedEvent]: ChallengeUpdatedEvent,
      [StateProgressedEvent]: StateProgressedEvent,
      [ChallengeProgressedEvent]: ChallengeProgressedEvent,
      [ChallengeProgressionFailedEvent]: ChallengeProgressionFailedEvent,
      [ChallengeOutcomeSetEvent]: ChallengeOutcomeSetEvent,
      [ChallengeOutcomeFailedEvent]: ChallengeOutcomeFailedEvent,
      [ChallengeCompletedEvent]: ChallengeCompletedEvent,
      [ChallengeCompletionFailedEvent]: ChallengeCompletionFailedEvent,
      [ChallengeCancelledEvent]: ChallengeCancelledEvent,
      [ChallengeCancellationFailedEvent]: ChallengeCancellationFailedEvent,
  };
  (function (StoredAppChallengeStatus) {
      StoredAppChallengeStatus[StoredAppChallengeStatus["NO_CHALLENGE"] = 0] = "NO_CHALLENGE";
      StoredAppChallengeStatus[StoredAppChallengeStatus["IN_DISPUTE"] = 1] = "IN_DISPUTE";
      StoredAppChallengeStatus[StoredAppChallengeStatus["IN_ONCHAIN_PROGRESSION"] = 2] = "IN_ONCHAIN_PROGRESSION";
      StoredAppChallengeStatus[StoredAppChallengeStatus["EXPLICITLY_FINALIZED"] = 3] = "EXPLICITLY_FINALIZED";
      StoredAppChallengeStatus[StoredAppChallengeStatus["OUTCOME_SET"] = 4] = "OUTCOME_SET";
      StoredAppChallengeStatus[StoredAppChallengeStatus["CONDITIONAL_SENT"] = 5] = "CONDITIONAL_SENT";
      StoredAppChallengeStatus[StoredAppChallengeStatus["PENDING_TRANSITION"] = 6] = "PENDING_TRANSITION";
  })(exports.StoredAppChallengeStatus || (exports.StoredAppChallengeStatus = {}));

  Object.defineProperty(exports, 'Contract', {
    enumerable: true,
    get: function () {
      return ethers.Contract;
    }
  });
  exports.AppNames = AppNames;
  exports.BigNumber = BigNumber;
  exports.CF_METHOD_TIMEOUT = CF_METHOD_TIMEOUT;
  exports.CONVENTION_FOR_ETH_ASSET_ID = CONVENTION_FOR_ETH_ASSET_ID;
  exports.ChallengeCancellationFailedEvent = ChallengeCancellationFailedEvent;
  exports.ChallengeCancelledEvent = ChallengeCancelledEvent;
  exports.ChallengeCompletedEvent = ChallengeCompletedEvent;
  exports.ChallengeCompletionFailedEvent = ChallengeCompletionFailedEvent;
  exports.ChallengeEvents = ChallengeEvents;
  exports.ChallengeOutcomeFailedEvent = ChallengeOutcomeFailedEvent;
  exports.ChallengeOutcomeSetEvent = ChallengeOutcomeSetEvent;
  exports.ChallengeProgressedEvent = ChallengeProgressedEvent;
  exports.ChallengeProgressionFailedEvent = ChallengeProgressionFailedEvent;
  exports.ChallengeUpdatedEvent = ChallengeUpdatedEvent;
  exports.ChannelMethods = ChannelMethods;
  exports.CommitmentTarget = CommitmentTarget;
  exports.CommitmentTypes = CommitmentTypes;
  exports.ConditionalTransferAppNames = ConditionalTransferAppNames;
  exports.ConditionalTransferTypes = ConditionalTransferTypes;
  exports.ConnextClientStorePrefix = ConnextClientStorePrefix;
  exports.ConnextEventEmitter = ConnextEventEmitter;
  exports.ConnextNodeStorePrefix = ConnextNodeStorePrefix;
  exports.DepositAppName = DepositAppName;
  exports.DepositAppStateEncoding = DepositAppStateEncoding;
  exports.ETHEREUM_NAMESPACE = ETHEREUM_NAMESPACE;
  exports.EXPECTED_CONTRACT_NAMES_IN_NETWORK_CONTEXT = EXPECTED_CONTRACT_NAMES_IN_NETWORK_CONTEXT;
  exports.EventNames = EventNames;
  exports.GANACHE_CHAIN_ID = GANACHE_CHAIN_ID;
  exports.GenericConditionalTransferAppName = GenericConditionalTransferAppName;
  exports.HashLockTransferAppActionEncoding = HashLockTransferAppActionEncoding;
  exports.HashLockTransferAppName = HashLockTransferAppName;
  exports.HashLockTransferAppStateEncoding = HashLockTransferAppStateEncoding;
  exports.HashLockTransferStatus = HashLockTransferStatus;
  exports.JsonRpcProvider = JsonRpcProvider;
  exports.LinkedTransferStatus = LinkedTransferStatus;
  exports.MethodNames = MethodNames;
  exports.NATS_ATTEMPTS = NATS_ATTEMPTS;
  exports.NATS_TIMEOUT = NATS_TIMEOUT;
  exports.OutcomeType = OutcomeType;
  exports.PriceOracleTypes = PriceOracleTypes;
  exports.ProtocolNames = ProtocolNames;
  exports.ProtocolRoles = ProtocolRoles;
  exports.STORE_SCHEMA_VERSION = STORE_SCHEMA_VERSION;
  exports.SignedTransferStatus = SignedTransferStatus;
  exports.SimpleLinkedTransferAppActionEncoding = SimpleLinkedTransferAppActionEncoding;
  exports.SimpleLinkedTransferAppName = SimpleLinkedTransferAppName;
  exports.SimpleLinkedTransferAppStateEncoding = SimpleLinkedTransferAppStateEncoding;
  exports.SimpleSignedTransferAppActionEncoding = SimpleSignedTransferAppActionEncoding;
  exports.SimpleSignedTransferAppName = SimpleSignedTransferAppName;
  exports.SimpleSignedTransferAppStateEncoding = SimpleSignedTransferAppStateEncoding;
  exports.SimpleSwapAppStateEncoding = SimpleSwapAppStateEncoding;
  exports.SimpleTwoPartySwapAppName = SimpleTwoPartySwapAppName;
  exports.StateProgressedEvent = StateProgressedEvent;
  exports.StateSchemaVersion = StateSchemaVersion;
  exports.SupportedApplicationNames = SupportedApplicationNames;
  exports.WatcherEvents = WatcherEvents;
  exports.WithdrawAppActionEncoding = WithdrawAppActionEncoding;
  exports.WithdrawAppName = WithdrawAppName;
  exports.WithdrawAppStateEncoding = WithdrawAppStateEncoding;
  exports.enumify = enumify;
  exports.getTransferTypeFromAppName = getTransferTypeFromAppName;
  exports.multiAssetMultiPartyCoinTransferEncoding = multiAssetMultiPartyCoinTransferEncoding;
  exports.multiAssetMultiPartyCoinTransferInterpreterParamsEncoding = multiAssetMultiPartyCoinTransferInterpreterParamsEncoding;
  exports.singleAssetTwoPartyCoinTransferEncoding = singleAssetTwoPartyCoinTransferEncoding;
  exports.singleAssetTwoPartyCoinTransferInterpreterParamsEncoding = singleAssetTwoPartyCoinTransferInterpreterParamsEncoding;
  exports.tidy = tidy;
  exports.twoPartyFixedOutcomeInterpreterParamsEncoding = twoPartyFixedOutcomeInterpreterParamsEncoding;

  return exports;

}({}, ethers, EventEmitter));
