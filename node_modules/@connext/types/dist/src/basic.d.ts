import { BigNumber as ethersBN, BigNumberish, Interface, ParamType } from "ethers/utils";
export { Contract } from "ethers";
export { JsonRpcProvider, TransactionReceipt, TransactionResponse } from "ethers/providers";
export { BigNumberish, Network, Transaction } from "ethers/utils";
export declare type ABIEncoding = string;
export declare type Address = string;
export declare type AssetId = string;
export declare type Bytes32 = string;
export declare type DecString = string;
export declare type HexString = string;
export declare type PublicIdentifier = string;
export declare type PublicKey = string;
export declare type PrivateKey = string;
export declare type SignatureString = string;
export declare type UrlString = string;
export declare type BigNumber = ethersBN;
export declare const BigNumber: typeof ethersBN;
export declare type BigNumberJson = {
    _hex: HexString;
};
export declare type StringMapping = {
    [key: string]: string;
};
export interface EthSignature {
    r: string;
    s: string;
    v: string;
}
export declare type ContractABI = Array<string | ParamType> | string | Interface;
export declare type SolidityPrimitiveType = string | BigNumberish | boolean;
declare type SolidityABIEncoderV2Struct = {
    [x: string]: SolidityValueType;
};
declare type SolidityABIEncoderV2SArray = Array<SolidityValueType>;
export declare type SolidityValueType = SolidityPrimitiveType | SolidityABIEncoderV2Struct | SolidityABIEncoderV2SArray;
export declare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
//# sourceMappingURL=basic.d.ts.map