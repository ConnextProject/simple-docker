import { providers } from "ethers";
import EventEmitter from "eventemitter3";
import { INodeApiClient } from "./api";
import { Address, DecString, PublicIdentifier, PublicKey, UrlString } from "./basic";
import { IChannelSigner } from "./crypto";
import { EventName } from "./events";
import { ILoggerService } from "./logger";
import { JsonRpcRequest } from "./rpc";
import { WithdrawalMonitorObject, IStoreService } from "./store";
import { StateChannelJSON } from "./state";
import { MinimalTransaction, SetStateCommitmentJSON, ConditionalTransactionCommitmentJSON } from "./commitments";
export declare const ChannelMethods: {
    chan_isSigner: "chan_isSigner";
    chan_config: "chan_config";
    chan_enable: "chan_enable";
    chan_signMessage: "chan_signMessage";
    chan_encrypt: "chan_encrypt";
    chan_decrypt: "chan_decrypt";
    chan_restoreState: "chan_restoreState";
    chan_getUserWithdrawal: "chan_getUserWithdrawal";
    chan_setUserWithdrawal: "chan_setUserWithdrawal";
    chan_setStateChannel: "chan_setStateChannel";
    chan_walletDeposit: "chan_walletDeposit";
    chan_getSchemaVersion: "chan_getSchemaVersion";
    chan_updateSchemaVersion: "chan_updateSchemaVersion";
    chan_create: "chan_create";
    chan_deployStateDepositHolder: "chan_deployStateDepositHolder";
    chan_getAppInstance: "chan_getAppInstance";
    chan_getAppInstances: "chan_getAppInstances";
    chan_getChannelAddresses: "chan_getChannelAddresses";
    chan_getFreeBalanceState: "chan_getFreeBalanceState";
    chan_getProposedAppInstance: "chan_getProposedAppInstance";
    chan_getProposedAppInstances: "chan_getProposedAppInstances";
    chan_getStateChannel: "chan_getStateChannel";
    chan_getStateDepositHolderAddress: "chan_getStateDepositHolderAddress";
    chan_getTokenIndexedFreeBalanceStates: "chan_getTokenIndexedFreeBalanceStates";
    chan_install: "chan_install";
    chan_proposeInstall: "chan_proposeInstall";
    chan_rejectInstall: "chan_rejectInstall";
    chan_sync: "chan_sync";
    chan_takeAction: "chan_takeAction";
    chan_uninstall: "chan_uninstall";
    chan_withdraw: "chan_withdraw";
    chan_withdrawCommitment: "chan_withdrawCommitment";
};
export declare type ChannelMethods = typeof ChannelMethods[keyof typeof ChannelMethods];
export declare type ChannelProviderConfig = {
    signerAddress: Address;
    multisigAddress?: Address;
    nodeUrl: UrlString;
    userIdentifier: PublicIdentifier;
};
export interface CFChannelProviderOptions {
    ethProvider: providers.JsonRpcProvider;
    signer: IChannelSigner;
    node: INodeApiClient;
    logger?: ILoggerService;
    store: IStoreService;
}
export declare type WalletDepositParams = {
    amount: DecString;
    assetId: Address;
};
export declare class ConnextEventEmitter extends EventEmitter<string | ChannelMethods | EventName> {
}
export interface IRpcConnection extends ConnextEventEmitter {
    connected: boolean;
    send(payload: JsonRpcRequest): Promise<any>;
    open(): Promise<void>;
    close(): Promise<void>;
}
export interface IChannelProvider extends ConnextEventEmitter {
    connected: boolean;
    connection: IRpcConnection;
    enable(): Promise<ChannelProviderConfig>;
    send(method: ChannelMethods, params: any): Promise<any>;
    close(): Promise<void>;
    config: ChannelProviderConfig | undefined;
    multisigAddress: Address | undefined;
    signerAddress: Address | undefined;
    on(event: string, listener: (...args: any[]) => void): any;
    once(event: string, listener: (...args: any[]) => void): any;
    isSigner(): Promise<boolean>;
    signMessage(message: string): Promise<string>;
    encrypt(message: string, publicKey: PublicKey): Promise<string>;
    decrypt(encryptedPreImage: string): Promise<string>;
    walletDeposit(params: WalletDepositParams): Promise<string>;
    getUserWithdrawals(): Promise<WithdrawalMonitorObject[]>;
    setUserWithdrawal(withdrawal: WithdrawalMonitorObject, remove?: boolean): Promise<void>;
    restoreState(state?: StateChannelJSON): Promise<void>;
    setStateChannel(channel: StateChannelJSON, setupCommitment: MinimalTransaction, setStateCommitments: [string, SetStateCommitmentJSON][], conditionalCommitments: [string, ConditionalTransactionCommitmentJSON][]): Promise<void>;
    getSchemaVersion(): Promise<number>;
    updateSchemaVersion(version?: number): Promise<void>;
}
//# sourceMappingURL=channelProvider.d.ts.map