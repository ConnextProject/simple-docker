import { Address, BigNumberish, BigNumberJson, Bytes32, HexString } from "./basic";
import { AppIdentity, MultisigOperation, ContractAddresses } from "./contracts";
export declare type MinimalTransaction = {
    to: Address;
    value: BigNumberish;
    data: HexString;
};
export interface EthereumCommitment {
    signatures: string[];
    encode(): HexString;
    hashToSign(): Bytes32;
    getSignedTransaction(): Promise<MinimalTransaction>;
}
export declare const CommitmentTypes: {
    Conditional: "conditional";
    SetState: "setState";
    Setup: "setup";
    Withdraw: "withdraw";
};
export declare type CommitmentTypes = (typeof CommitmentTypes)[keyof typeof CommitmentTypes];
export declare type MultisigTransaction = MinimalTransaction & {
    operation: MultisigOperation;
};
export declare type SetStateCommitmentJSON = {
    readonly appIdentity: AppIdentity;
    readonly appIdentityHash: HexString;
    readonly appStateHash: HexString;
    readonly challengeRegistryAddress: Address;
    readonly signatures: string[];
    readonly stateTimeout: BigNumberJson;
    readonly versionNumber: BigNumberJson;
};
export declare type ConditionalTransactionCommitmentJSON = {
    readonly appIdentityHash: HexString;
    readonly contractAddresses: ContractAddresses;
    readonly freeBalanceAppIdentityHash: HexString;
    readonly interpreterAddr: Address;
    readonly interpreterParams: HexString;
    readonly multisigAddress: Address;
    readonly multisigOwners: Address[];
    readonly signatures: string[];
};
//# sourceMappingURL=commitments.d.ts.map