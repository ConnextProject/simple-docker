import { Address, HexString, Bytes32 } from "../basic";
import { BigNumber } from "ethers/utils";
export declare type AppIdentity = {
    channelNonce: BigNumber;
    participants: Address[];
    multisigAddress: Address;
    appDefinition: Address;
    defaultTimeout: BigNumber;
};
export declare type AppChallenge = {
    appStateHash: HexString;
    versionNumber: BigNumber;
    finalizesAt: BigNumber;
    status: ChallengeStatus;
};
export declare enum ChallengeStatus {
    NO_CHALLENGE = 0,
    IN_DISPUTE = 1,
    IN_ONCHAIN_PROGRESSION = 2,
    EXPLICITLY_FINALIZED = 3,
    OUTCOME_SET = 4
}
export declare type SignedAppChallengeUpdate = {
    appStateHash: Bytes32;
    versionNumber: BigNumber;
    timeout: BigNumber;
    signatures: string[];
};
export declare type SignedCancelChallengeRequest = {
    versionNumber: BigNumber;
    signatures: string[];
};
declare const StateProgressedEventName = "StateProgressed";
export declare type StateProgressedEventPayload = {
    identityHash: string;
    action: string;
    versionNumber: BigNumber;
    timeout: BigNumber;
    turnTaker: Address;
    signature: string;
};
declare const ChallengeUpdatedEventName = "ChallengeUpdated";
export declare type ChallengeUpdatedEventPayload = {
    identityHash: Bytes32;
    status: ChallengeStatus;
    appStateHash: Bytes32;
    versionNumber: BigNumber;
    finalizesAt: BigNumber;
};
export declare const ChallengeEvents: {
    readonly ChallengeUpdated: "ChallengeUpdated";
    readonly StateProgressed: "StateProgressed";
};
export declare type ChallengeEvent = keyof typeof ChallengeEvents;
interface ChallengeEventsMap {
    [ChallengeUpdatedEventName]: ChallengeUpdatedEventPayload;
    [StateProgressedEventName]: StateProgressedEventPayload;
}
export declare type ChallengeEventData = {
    [P in keyof ChallengeEventsMap]: ChallengeEventsMap[P];
};
export declare type MixinSetStateParams = {
    appIdentity: AppIdentity;
    req: SignedAppChallengeUpdate;
};
export declare type MixinProgressStateParams = MixinSetStateParams & {
    oldAppState: string;
    action: string;
};
export declare type MixinCancelChallengeParams = {
    appIdentity: AppIdentity;
    req: SignedCancelChallengeRequest;
};
export declare type MixinSetAndProgressStateParams = {
    appIdentity: AppIdentity;
    req1: SignedAppChallengeUpdate;
    req2: SignedAppChallengeUpdate;
    appState: string;
    action: string;
};
export declare type MixinSetOutcomeParams = {
    appIdentity: AppIdentity;
    finalState: string;
};
export {};
//# sourceMappingURL=adjudicator.d.ts.map