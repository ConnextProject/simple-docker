import { Address, BigNumber, BigNumberJson } from "../basic";
export declare type MultiAssetMultiPartyCoinTransferInterpreterParams = {
    limit: BigNumber[];
    tokenAddresses: Address[];
};
export declare type MultiAssetMultiPartyCoinTransferInterpreterParamsJson = Partial<MultiAssetMultiPartyCoinTransferInterpreterParams> & {
    limit: BigNumberJson[];
};
export declare const multiAssetMultiPartyCoinTransferInterpreterParamsEncoding: string;
export declare type SingleAssetTwoPartyCoinTransferInterpreterParams = {
    limit: BigNumber;
    tokenAddress: Address;
};
export declare type SingleAssetTwoPartyCoinTransferInterpreterParamsJson = Partial<SingleAssetTwoPartyCoinTransferInterpreterParams> & {
    limit: BigNumberJson;
};
export declare const singleAssetTwoPartyCoinTransferInterpreterParamsEncoding: string;
export declare type TwoPartyFixedOutcomeInterpreterParams = {
    playerAddrs: [Address, Address];
    amount: BigNumber;
    tokenAddress: Address;
};
export declare type TwoPartyFixedOutcomeInterpreterParamsJson = Partial<TwoPartyFixedOutcomeInterpreterParams> & {
    amount: BigNumberJson;
};
export declare const twoPartyFixedOutcomeInterpreterParamsEncoding: string;
export declare type CoinTransfer = {
    amount: BigNumber;
    to: Address;
};
export declare enum TwoPartyFixedOutcome {
    SEND_TO_ADDR_ONE = 0,
    SEND_TO_ADDR_TWO = 1,
    SPLIT_AND_SEND_TO_BOTH_ADDRS = 2
}
export declare enum MultisigOperation {
    Call = 0,
    DelegateCall = 1
}
//# sourceMappingURL=funding.d.ts.map