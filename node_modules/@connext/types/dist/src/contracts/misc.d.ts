import { Address, JsonRpcProvider } from "../basic";
export declare type AddressBook = {
    [chainId: string]: {
        [contractName: string]: {
            address: Address;
            txHash?: string;
            creationCodeHash?: string;
            runtimeCodeHash?: string;
        };
    };
};
export declare type AddressHistory = {
    [chainId: string]: {
        [contractName: string]: Address[];
    };
};
export declare type CriticalStateChannelAddresses = {
    ProxyFactory: Address;
    MinimumViableMultisig: Address;
};
export declare type ContractAddresses = CriticalStateChannelAddresses & {
    ChallengeRegistry: Address;
    ConditionalTransactionDelegateTarget: Address;
    DepositApp: Address;
    WithdrawApp: Address;
    HashLockTransferApp?: Address;
    IdentityApp: Address;
    MultiAssetMultiPartyCoinTransferInterpreter: Address;
    SimpleLinkedTransferApp?: Address;
    SimpleSignedTransferApp?: Address;
    SimpleTwoPartySwapApp?: Address;
    SingleAssetTwoPartyCoinTransferInterpreter: Address;
    TimeLockedPassThrough: Address;
    Token?: Address;
    TwoPartyFixedOutcomeInterpreter: Address;
};
export interface NetworkContext {
    contractAddresses: ContractAddresses;
    provider: JsonRpcProvider;
}
export declare const EXPECTED_CONTRACT_NAMES_IN_NETWORK_CONTEXT: string[];
export declare const singleAssetTwoPartyCoinTransferEncoding: string;
export declare const multiAssetMultiPartyCoinTransferEncoding: string;
export declare const OutcomeType: {
    TWO_PARTY_FIXED_OUTCOME: "TWO_PARTY_FIXED_OUTCOME";
    MULTI_ASSET_MULTI_PARTY_COIN_TRANSFER: "MULTI_ASSET_MULTI_PARTY_COIN_TRANSFER";
    SINGLE_ASSET_TWO_PARTY_COIN_TRANSFER: "SINGLE_ASSET_TWO_PARTY_COIN_TRANSFER";
};
export declare type OutcomeType = typeof OutcomeType[keyof typeof OutcomeType];
export declare const CommitmentTarget: {
    MULTISIG: "0";
    SET_STATE: "1";
    CANCEL_DISPUTE: "2";
};
//# sourceMappingURL=misc.d.ts.map