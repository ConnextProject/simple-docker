import { Ctx } from "evt";
import { BigNumber, providers } from "ethers";
import { AppInstanceJson } from "./app";
import { Address, Bytes32, PublicIdentifier, SolidityValueType } from "./basic";
import { ConditionalTransferTypes, CreatedConditionalTransferMetaMap, UnlockedConditionalTransferMetaMap } from "./transfers";
import { ProtocolParams } from "./protocol";
import { ProtocolMessageData } from "./messaging";
import { PublicParams } from "./public";
import { MinimalTransaction } from "./commitments";
import { StateChannelJSON } from "./state";
declare type SignedTransfer = typeof ConditionalTransferTypes.SignedTransfer;
declare type HashLockTransfer = typeof ConditionalTransferTypes.HashLockTransfer;
declare type LinkedTransfer = typeof ConditionalTransferTypes.LinkedTransfer;
declare const CONDITIONAL_TRANSFER_CREATED_EVENT = "CONDITIONAL_TRANSFER_CREATED_EVENT";
export declare type ConditionalTransferCreatedEventData<T extends ConditionalTransferTypes> = {
    amount: BigNumber;
    appIdentityHash: Bytes32;
    assetId: Address;
    paymentId?: Bytes32;
    sender: Address;
    recipient?: Address;
    meta: any;
    type: T;
    transferMeta: CreatedConditionalTransferMetaMap[T];
};
declare const CONDITIONAL_TRANSFER_UNLOCKED_EVENT = "CONDITIONAL_TRANSFER_UNLOCKED_EVENT";
export declare type ConditionalTransferUnlockedEventData<T extends ConditionalTransferTypes> = {
    amount: BigNumber;
    assetId: Address;
    paymentId?: Bytes32;
    sender: PublicIdentifier;
    recipient?: PublicIdentifier;
    meta: any;
    type: T;
    transferMeta: UnlockedConditionalTransferMetaMap[T];
};
declare const CONDITIONAL_TRANSFER_FAILED_EVENT = "CONDITIONAL_TRANSFER_FAILED_EVENT";
export declare type ConditionalTransferFailedEventData<T extends ConditionalTransferTypes> = {
    paymentId: Bytes32;
    type: T;
    error: any;
};
declare const CREATE_CHANNEL_EVENT = "CREATE_CHANNEL_EVENT";
declare type CreateMultisigEventData = {
    owners: Address[];
    multisigAddress: Address;
    counterpartyIdentifier?: PublicIdentifier;
};
declare const SETUP_FAILED_EVENT = "SETUP_FAILED_EVENT";
declare type SetupFailedEventData = {
    params: ProtocolParams.Setup;
    error: string;
};
declare const DEPOSIT_CONFIRMED_EVENT = "DEPOSIT_CONFIRMED_EVENT";
declare type DepositConfirmedEventData = {
    hash: string;
    amount: BigNumber;
    assetId: Address;
};
declare const DEPOSIT_FAILED_EVENT = "DEPOSIT_FAILED_EVENT";
declare type DepositFailedEventData = {
    amount: BigNumber;
    assetId: Address;
    error: string;
};
declare const DEPOSIT_STARTED_EVENT = "DEPOSIT_STARTED_EVENT";
declare type DepositStartedEventData = {
    amount: BigNumber;
    assetId: Address;
    appIdentityHash: string;
    hash: string;
};
declare const INSTALL_EVENT = "INSTALL_EVENT";
declare type InstallEventData = {
    appIdentityHash: Bytes32;
};
declare const INSTALL_FAILED_EVENT = "INSTALL_FAILED_EVENT";
declare type InstallFailedEventData = {
    params: ProtocolParams.Install;
    error: string;
};
declare const PROPOSE_INSTALL_EVENT = "PROPOSE_INSTALL_EVENT";
declare type ProposeEventData = {
    params: ProtocolParams.Propose;
    appInstanceId: string;
};
declare const PROPOSE_INSTALL_FAILED_EVENT = "PROPOSE_INSTALL_FAILED_EVENT";
declare type ProposeFailedEventData = {
    params: ProtocolParams.Propose;
    error: string;
};
declare const PROTOCOL_MESSAGE_EVENT = "PROTOCOL_MESSAGE_EVENT";
declare const REJECT_INSTALL_EVENT = "REJECT_INSTALL_EVENT";
declare type RejectInstallEventData = {
    appInstance: AppInstanceJson;
    reason?: string;
};
declare const UNINSTALL_EVENT = "UNINSTALL_EVENT";
declare type UninstallEventData = {
    appIdentityHash: Bytes32;
    multisigAddress: string;
    uninstalledApp: AppInstanceJson;
    action?: SolidityValueType;
};
declare const UNINSTALL_FAILED_EVENT = "UNINSTALL_FAILED_EVENT";
declare type UninstallFailedEventData = {
    params: ProtocolParams.Uninstall;
    error: string;
};
declare const UPDATE_STATE_EVENT = "UPDATE_STATE_EVENT";
declare type UpdateStateEventData = {
    appIdentityHash: Bytes32;
    newState: SolidityValueType;
    action?: SolidityValueType;
};
declare const UPDATE_STATE_FAILED_EVENT = "UPDATE_STATE_FAILED_EVENT";
declare type UpdateStateFailedEventData = {
    params: ProtocolParams.TakeAction;
    error: string;
};
declare const WITHDRAWAL_CONFIRMED_EVENT = "WITHDRAWAL_CONFIRMED_EVENT";
declare type WithdrawalConfirmedEventData = {
    transaction: providers.TransactionResponse;
};
declare const WITHDRAWAL_FAILED_EVENT = "WITHDRAWAL_FAILED_EVENT";
declare type WithdrawalFailedEventData = WithdrawalStartedEventData & {
    error: string;
};
declare const WITHDRAWAL_STARTED_EVENT = "WITHDRAWAL_STARTED_EVENT";
declare type WithdrawalStartedEventData = {
    params: PublicParams.Withdraw;
    withdrawCommitment: MinimalTransaction;
    withdrawerSignatureOnCommitment: string;
};
declare const SYNC_EVENT = "SYNC";
declare type SyncEventData = {
    syncedChannel: StateChannelJSON;
};
declare const SYNC_FAILED_EVENT = "SYNC_FAILED_EVENT";
declare type SyncFailedEventData = {
    params: ProtocolParams.Sync;
    error: string;
};
interface EventPayloadMap {
    [CONDITIONAL_TRANSFER_CREATED_EVENT]: ConditionalTransferCreatedEventData<HashLockTransfer | LinkedTransfer | SignedTransfer>;
    [CONDITIONAL_TRANSFER_UNLOCKED_EVENT]: ConditionalTransferUnlockedEventData<HashLockTransfer | LinkedTransfer | SignedTransfer>;
    [CONDITIONAL_TRANSFER_FAILED_EVENT]: ConditionalTransferFailedEventData<HashLockTransfer | LinkedTransfer | SignedTransfer>;
    [CREATE_CHANNEL_EVENT]: CreateMultisigEventData;
    [SETUP_FAILED_EVENT]: SetupFailedEventData;
    [DEPOSIT_CONFIRMED_EVENT]: DepositConfirmedEventData;
    [DEPOSIT_FAILED_EVENT]: DepositFailedEventData;
    [DEPOSIT_STARTED_EVENT]: DepositStartedEventData;
    [INSTALL_EVENT]: InstallEventData;
    [INSTALL_FAILED_EVENT]: InstallFailedEventData;
    [PROPOSE_INSTALL_EVENT]: ProposeEventData;
    [PROPOSE_INSTALL_FAILED_EVENT]: ProposeFailedEventData;
    [PROTOCOL_MESSAGE_EVENT]: ProtocolMessageData;
    [REJECT_INSTALL_EVENT]: RejectInstallEventData;
    [SYNC_EVENT]: SyncEventData;
    [SYNC_FAILED_EVENT]: SyncFailedEventData;
    [UNINSTALL_EVENT]: UninstallEventData;
    [UNINSTALL_FAILED_EVENT]: UninstallFailedEventData;
    [UPDATE_STATE_EVENT]: UpdateStateEventData;
    [UPDATE_STATE_FAILED_EVENT]: UpdateStateFailedEventData;
    [WITHDRAWAL_CONFIRMED_EVENT]: WithdrawalConfirmedEventData;
    [WITHDRAWAL_FAILED_EVENT]: WithdrawalFailedEventData;
    [WITHDRAWAL_STARTED_EVENT]: WithdrawalStartedEventData;
}
export declare const EventNames: {
    readonly CONDITIONAL_TRANSFER_CREATED_EVENT: "CONDITIONAL_TRANSFER_CREATED_EVENT";
    readonly CONDITIONAL_TRANSFER_UNLOCKED_EVENT: "CONDITIONAL_TRANSFER_UNLOCKED_EVENT";
    readonly CONDITIONAL_TRANSFER_FAILED_EVENT: "CONDITIONAL_TRANSFER_FAILED_EVENT";
    readonly CREATE_CHANNEL_EVENT: "CREATE_CHANNEL_EVENT";
    readonly SETUP_FAILED_EVENT: "SETUP_FAILED_EVENT";
    readonly DEPOSIT_CONFIRMED_EVENT: "DEPOSIT_CONFIRMED_EVENT";
    readonly DEPOSIT_FAILED_EVENT: "DEPOSIT_FAILED_EVENT";
    readonly DEPOSIT_STARTED_EVENT: "DEPOSIT_STARTED_EVENT";
    readonly INSTALL_EVENT: "INSTALL_EVENT";
    readonly INSTALL_FAILED_EVENT: "INSTALL_FAILED_EVENT";
    readonly PROPOSE_INSTALL_EVENT: "PROPOSE_INSTALL_EVENT";
    readonly PROPOSE_INSTALL_FAILED_EVENT: "PROPOSE_INSTALL_FAILED_EVENT";
    readonly PROTOCOL_MESSAGE_EVENT: "PROTOCOL_MESSAGE_EVENT";
    readonly REJECT_INSTALL_EVENT: "REJECT_INSTALL_EVENT";
    readonly SYNC: "SYNC";
    readonly SYNC_FAILED_EVENT: "SYNC_FAILED_EVENT";
    readonly UNINSTALL_EVENT: "UNINSTALL_EVENT";
    readonly UNINSTALL_FAILED_EVENT: "UNINSTALL_FAILED_EVENT";
    readonly UPDATE_STATE_EVENT: "UPDATE_STATE_EVENT";
    readonly UPDATE_STATE_FAILED_EVENT: "UPDATE_STATE_FAILED_EVENT";
    readonly WITHDRAWAL_CONFIRMED_EVENT: "WITHDRAWAL_CONFIRMED_EVENT";
    readonly WITHDRAWAL_FAILED_EVENT: "WITHDRAWAL_FAILED_EVENT";
    readonly WITHDRAWAL_STARTED_EVENT: "WITHDRAWAL_STARTED_EVENT";
};
export declare type EventName = keyof typeof EventNames;
export declare type EventPayload = {
    [P in keyof EventPayloadMap]: EventPayloadMap[P];
};
export interface IBasicEventEmitter {
    attach<T extends EventName>(event: T, callback: (payload: EventPayload[T]) => void | Promise<void>, filter?: (payload: EventPayload[T]) => boolean): void;
    attachOnce<T extends EventName>(event: T, callback: (payload: EventPayload[T]) => void | Promise<void>, filter?: (payload: EventPayload[T]) => boolean): void;
    post<T extends EventName>(event: T, payload: EventPayload[T]): void;
    detach(ctx?: Ctx<[EventName, EventPayload[EventName]]>): void;
    createContext(): Ctx<[EventName, EventPayload[EventName]]>;
    waitFor<T extends EventName>(event: T, timeout: number, filter?: (payload: EventPayload[T]) => boolean): Promise<EventPayload[T]>;
}
export declare namespace EventPayloads {
    type HashLockTransferCreated = ConditionalTransferCreatedEventData<HashLockTransfer>;
    type LinkedTransferCreated = ConditionalTransferCreatedEventData<LinkedTransfer>;
    type SignedTransferCreated = ConditionalTransferCreatedEventData<SignedTransfer>;
    type HashLockTransferUnlocked = ConditionalTransferUnlockedEventData<HashLockTransfer>;
    type LinkedTransferUnlocked = ConditionalTransferUnlockedEventData<LinkedTransfer>;
    type SignedTransferUnlocked = ConditionalTransferUnlockedEventData<SignedTransfer>;
    type HashLockTransferFailed = ConditionalTransferFailedEventData<HashLockTransfer>;
    type LinkedTransferFailed = ConditionalTransferFailedEventData<LinkedTransfer>;
    type SignedTransferFailed = ConditionalTransferFailedEventData<SignedTransfer>;
    type ConditionalTransferCreated<T> = ConditionalTransferCreatedEventData<HashLockTransfer | LinkedTransfer | SignedTransfer>;
    type ConditionalTransferUnlocked<T> = ConditionalTransferUnlockedEventData<HashLockTransfer | LinkedTransfer | SignedTransfer>;
    type ConditionalTransferFailed<T> = ConditionalTransferFailedEventData<HashLockTransfer | LinkedTransfer | SignedTransfer>;
    type DepositStarted = DepositStartedEventData;
    type DepositConfirmed = DepositConfirmedEventData;
    type DepositFailed = DepositFailedEventData;
    type WithdrawalStarted = WithdrawalStartedEventData;
    type WithdrawalConfirmed = WithdrawalConfirmedEventData;
    type WithdrawalFailed = WithdrawalFailedEventData;
    type CreateMultisig = CreateMultisigEventData;
    type CreateMultisigFailed = SetupFailedEventData;
    type Install = InstallEventData;
    type InstallFailed = InstallFailedEventData;
    type Propose = ProposeEventData;
    type ProposeFailed = ProposeFailedEventData;
    type Uninstall = UninstallEventData;
    type UninstallFailed = UninstallFailedEventData;
    type UpdateState = UpdateStateEventData;
    type UpdateStateFailed = UpdateStateFailedEventData;
    type Sync = SyncEventData;
    type SyncFailed = SyncFailedEventData;
    type ProtocolMessage = ProtocolMessageData;
    type RejectInstall = RejectInstallEventData;
}
export {};
//# sourceMappingURL=events.d.ts.map