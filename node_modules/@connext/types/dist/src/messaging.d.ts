import { EventName, EventNames, EventPayload } from "./events";
import { Address, PublicIdentifier } from "./basic";
import { ILoggerService } from "./logger";
import { ProtocolName, ProtocolParam } from "./protocol";
export declare type GenericMessage<T = any> = {
    data: T;
    from: Address;
    type: EventName;
};
export declare type ProtocolEventMessage<T extends EventName> = {
    data: EventPayload[T];
    from: Address;
    type: T;
};
export declare type ProtocolMessageData = {
    processID: string;
    protocol: ProtocolName;
    params?: ProtocolParam;
    to: PublicIdentifier;
    seq: number;
    customData: {
        [key: string]: any;
    };
};
export declare type CreateChannelMessage = ProtocolEventMessage<typeof EventNames["CREATE_CHANNEL_EVENT"]>;
export declare type DepositConfirmationMessage = ProtocolEventMessage<typeof EventNames["DEPOSIT_CONFIRMED_EVENT"]>;
export declare type DepositFailedMessage = ProtocolEventMessage<typeof EventNames["DEPOSIT_FAILED_EVENT"]>;
export declare type DepositStartedMessage = ProtocolEventMessage<typeof EventNames["DEPOSIT_STARTED_EVENT"]>;
export declare type InstallMessage = ProtocolEventMessage<typeof EventNames["INSTALL_EVENT"]>;
export declare type ProtocolMessage = ProtocolEventMessage<typeof EventNames["PROTOCOL_MESSAGE_EVENT"]>;
export declare type ProposeMessage = ProtocolEventMessage<typeof EventNames["PROPOSE_INSTALL_EVENT"]>;
export declare type RejectProposalMessage = ProtocolEventMessage<typeof EventNames["REJECT_INSTALL_EVENT"]>;
export declare type SyncMessage = ProtocolEventMessage<typeof EventNames["SYNC"]>;
export declare type UninstallMessage = ProtocolEventMessage<typeof EventNames["UNINSTALL_EVENT"]>;
export declare type UpdateStateMessage = ProtocolEventMessage<typeof EventNames["UPDATE_STATE_EVENT"]>;
export interface MessagingConfig {
    clusterId?: string;
    logger?: ILoggerService;
    messagingUrl: string | string[];
    options?: any;
    privateKey?: string;
    publicKey?: string;
    token?: string;
}
export interface IMessagingService {
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    flush(): Promise<void>;
    onReceive(subject: string, callback: (msg: GenericMessage) => void): Promise<void>;
    publish(subject: string, data: any): Promise<void>;
    request(subject: string, timeout: number, data: object, callback?: (response: any) => any): Promise<any>;
    send(to: string, msg: GenericMessage): Promise<void>;
    subscribe(subject: string, callback: (msg: GenericMessage) => void): Promise<void>;
    unsubscribe(subject: string): Promise<void>;
}
//# sourceMappingURL=messaging.d.ts.map