import { Address, AssetId, BigNumber, Bytes32, PublicIdentifier, SolidityValueType } from "./basic";
import { AppState } from "./contracts";
import { AppABIEncodings, AppInstanceJson, AppInstanceProposal } from "./app";
import { OutcomeType } from "./contracts";
import { PublicParams, PublicResults } from "./public";
import { StateChannelJSON } from "./state";
import { MinimalTransaction } from "./commitments";
declare type CreateChannelParams = {
    owners: PublicIdentifier[];
};
declare type CreateChannelResult = {
    multisigAddress: Address;
    owners?: Address[];
};
declare type DepositParams = PublicParams.Deposit;
declare type DepositResult = PublicResults.Deposit;
declare type DeployStateDepositHolderParams = {
    multisigAddress: Address;
    retryCount?: number;
};
declare type DeployStateDepositHolderResult = {
    transactionHash: Bytes32;
};
declare type GetChannelAddressesParams = {};
declare type GetChannelAddressesResult = {
    multisigAddresses: Address[];
};
declare type GetAppInstanceDetailsParams = {
    appIdentityHash: Bytes32;
};
declare type GetAppInstanceDetailsResult = {
    appInstance: AppInstanceJson;
};
declare type GetAppInstancesParams = {
    multisigAddress: Address;
};
declare type GetAppInstancesResult = {
    appInstances: AppInstanceJson[];
};
declare type GetStateDepositHolderAddressParams = {
    owners: Address[];
};
declare type GetStateDepositHolderAddressResult = {
    address: Address;
};
declare type GetFreeBalanceStateParams = {
    multisigAddress: Address;
    assetId?: Address;
};
declare type GetFreeBalanceStateResult = {
    [signerAddress: string]: BigNumber;
};
declare type GetTokenIndexedFreeBalanceStatesParams = {
    multisigAddress: Address;
};
declare type GetTokenIndexedFreeBalanceStatesResult = {
    [tokenAddress: string]: {
        [s: string]: BigNumber;
    };
};
declare type GetProposedAppInstanceParams = {
    appIdentityHash: Bytes32;
};
declare type GetProposedAppInstanceResult = {
    appInstance: AppInstanceProposal;
};
declare type GetProposedAppInstancesParams = {
    multisigAddress: Address;
};
declare type GetProposedAppInstancesResult = {
    appInstances: AppInstanceProposal[];
};
declare type GetStateChannelParams = {
    multisigAddress: Address;
};
declare type GetStateChannelResult = {
    data: StateChannelJSON;
};
declare type InstallParams = {
    appIdentityHash: Bytes32;
    multisigAddress: Address;
};
declare type InstallResult = {
    appInstance: AppInstanceJson;
};
declare type RequestDepositRightsParams = {
    assetId?: Address;
    multisigAddress: Address;
};
declare type RequestDepositRightsResult = {
    appIdentityHash: Bytes32;
    multisigAddress: Address;
};
declare type ProposeInstallParams = {
    abiEncodings: AppABIEncodings;
    appDefinition: Address;
    defaultTimeout: BigNumber;
    initialState: AppState;
    initiatorDeposit: BigNumber;
    initiatorDepositAssetId: AssetId;
    meta?: Object;
    multisigAddress: Address;
    outcomeType: OutcomeType;
    responderIdentifier: PublicIdentifier;
    responderDeposit: BigNumber;
    responderDepositAssetId: AssetId;
    stateTimeout?: BigNumber;
};
declare type ProposeInstallResult = {
    appIdentityHash: Bytes32;
};
declare type RejectInstallParams = {
    appIdentityHash: Bytes32;
    multisigAddress: Address;
};
declare type RejectInstallResult = {};
declare type TakeActionParams = {
    appIdentityHash: Bytes32;
    action: SolidityValueType;
    multisigAddress: Address;
    stateTimeout?: BigNumber;
};
declare type TakeActionResult = {
    newState: SolidityValueType;
};
declare type UninstallParams = {
    appIdentityHash: Bytes32;
    multisigAddress: Address;
};
declare type UninstallResult = {
    appIdentityHash: Bytes32;
    multisigAddress: Address;
};
declare type RescindDepositRightsParams = {
    assetId?: Address;
    appIdentityHash?: Bytes32;
    multisigAddress: Address;
};
declare type RescindDepositRightsResult = {
    freeBalance: {
        [s: string]: BigNumber;
    };
};
declare type WithdrawParams = {
    multisigAddress: Address;
    recipient?: Address;
    amount: BigNumber;
    tokenAddress?: Address;
};
declare type WithdrawResult = {
    recipient: Address;
    txHash: Bytes32;
};
declare type WithdrawCommitmentParams = WithdrawParams;
declare type WithdrawCommitmentResult = {
    transaction: MinimalTransaction;
};
declare type SyncParams = {
    multisigAddress: Address;
};
declare type SyncResult = {
    syncedChannel: StateChannelJSON;
};
export declare const MethodNames: {
    chan_create: "chan_create";
    chan_deployStateDepositHolder: "chan_deployStateDepositHolder";
    chan_getAppInstance: "chan_getAppInstance";
    chan_getAppInstances: "chan_getAppInstances";
    chan_getChannelAddresses: "chan_getChannelAddresses";
    chan_getFreeBalanceState: "chan_getFreeBalanceState";
    chan_getProposedAppInstance: "chan_getProposedAppInstance";
    chan_getProposedAppInstances: "chan_getProposedAppInstances";
    chan_getStateChannel: "chan_getStateChannel";
    chan_getStateDepositHolderAddress: "chan_getStateDepositHolderAddress";
    chan_getTokenIndexedFreeBalanceStates: "chan_getTokenIndexedFreeBalanceStates";
    chan_install: "chan_install";
    chan_proposeInstall: "chan_proposeInstall";
    chan_rejectInstall: "chan_rejectInstall";
    chan_sync: "chan_sync";
    chan_takeAction: "chan_takeAction";
    chan_uninstall: "chan_uninstall";
    chan_withdraw: "chan_withdraw";
    chan_withdrawCommitment: "chan_withdrawCommitment";
};
declare type MethodNames = typeof MethodNames[keyof typeof MethodNames];
export declare type MethodName = keyof typeof MethodNames;
export declare namespace MethodParams {
    type CreateChannel = CreateChannelParams;
    type DeployStateDepositHolder = DeployStateDepositHolderParams;
    type Deposit = DepositParams;
    type GetAppInstanceDetails = GetAppInstanceDetailsParams;
    type GetAppInstances = GetAppInstancesParams;
    type GetChannelAddresses = GetChannelAddressesParams;
    type GetFreeBalanceState = GetFreeBalanceStateParams;
    type GetProposedAppInstance = GetProposedAppInstanceParams;
    type GetProposedAppInstances = GetProposedAppInstancesParams;
    type GetStateChannel = GetStateChannelParams;
    type GetStateDepositHolderAddress = GetStateDepositHolderAddressParams;
    type GetTokenIndexedFreeBalanceStates = GetTokenIndexedFreeBalanceStatesParams;
    type Install = InstallParams;
    type ProposeInstall = ProposeInstallParams;
    type RejectInstall = RejectInstallParams;
    type RequestDepositRights = RequestDepositRightsParams;
    type RescindDepositRights = RescindDepositRightsParams;
    type TakeAction = TakeActionParams;
    type Sync = SyncParams;
    type Uninstall = UninstallParams;
    type Withdraw = WithdrawParams;
    type WithdrawCommitment = WithdrawCommitmentParams;
}
export declare type MethodParam = CreateChannelParams | DeployStateDepositHolderParams | DepositParams | GetAppInstanceDetailsParams | GetAppInstancesParams | GetChannelAddressesParams | GetFreeBalanceStateParams | GetProposedAppInstanceParams | GetProposedAppInstancesParams | GetStateChannelParams | GetStateDepositHolderAddressParams | GetTokenIndexedFreeBalanceStatesParams | InstallParams | ProposeInstallParams | RejectInstallParams | RequestDepositRightsParams | RescindDepositRightsParams | SyncParams | TakeActionParams | UninstallParams | WithdrawParams | WithdrawCommitmentParams;
export declare namespace MethodResults {
    type CreateChannel = CreateChannelResult;
    type DeployStateDepositHolder = DeployStateDepositHolderResult;
    type Deposit = DepositResult;
    type GetAppInstanceDetails = GetAppInstanceDetailsResult;
    type GetAppInstances = GetAppInstancesResult;
    type GetChannelAddresses = GetChannelAddressesResult;
    type GetFreeBalanceState = GetFreeBalanceStateResult;
    type GetProposedAppInstance = GetProposedAppInstanceResult;
    type GetProposedAppInstances = GetProposedAppInstancesResult;
    type GetStateChannel = GetStateChannelResult;
    type GetStateDepositHolderAddress = GetStateDepositHolderAddressResult;
    type GetTokenIndexedFreeBalanceStates = GetTokenIndexedFreeBalanceStatesResult;
    type Install = InstallResult;
    type ProposeInstall = ProposeInstallResult;
    type RejectInstall = RejectInstallResult;
    type RequestDepositRights = RequestDepositRightsResult;
    type RescindDepositRights = RescindDepositRightsResult;
    type Sync = SyncResult;
    type TakeAction = TakeActionResult;
    type Uninstall = UninstallResult;
    type Withdraw = WithdrawResult;
    type WithdrawCommitment = WithdrawCommitmentResult;
}
export declare type MethodResult = CreateChannelResult | DeployStateDepositHolderResult | DepositResult | GetAppInstanceDetailsResult | GetAppInstancesResult | GetChannelAddressesResult | GetFreeBalanceStateResult | GetProposedAppInstanceResult | GetProposedAppInstancesResult | GetStateChannelResult | GetStateDepositHolderAddressResult | GetTokenIndexedFreeBalanceStatesResult | InstallResult | ProposeInstallResult | RejectInstallResult | RequestDepositRightsResult | RescindDepositRightsResult | SyncResult | TakeActionResult | UninstallResult | WithdrawResult | WithdrawCommitmentResult;
export {};
//# sourceMappingURL=methods.d.ts.map