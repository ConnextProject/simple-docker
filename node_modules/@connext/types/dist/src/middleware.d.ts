import { ProtocolParams, ProtocolName } from "./protocol";
import { AppInstanceJson } from "./app";
import { StateChannelJSON } from "./state";
export declare type GenericMiddleware = {
    (args: any): any;
};
export declare const ProtocolRoles: {
    initiator: "initiator";
    responder: "responder";
};
export declare type ProtocolRoles = typeof ProtocolRoles[keyof typeof ProtocolRoles];
export declare type ProtocolRole = keyof typeof ProtocolRoles;
export declare type SetupMiddlewareContext = {
    role: ProtocolRole;
    params: ProtocolParams.Setup;
};
export declare type ProposeMiddlewareContext = {
    role: ProtocolRole;
    params: ProtocolParams.Propose;
    proposal: AppInstanceJson;
    stateChannel: StateChannelJSON;
};
export declare type InstallMiddlewareContext = {
    role: ProtocolRole;
    params: ProtocolParams.Install;
    appInstance: AppInstanceJson;
    stateChannel: StateChannelJSON;
};
export declare type TakeActionMiddlewareContext = {
    role: ProtocolRole;
    params: ProtocolParams.TakeAction;
    appInstance: AppInstanceJson;
    stateChannel: StateChannelJSON;
};
export declare type UninstallMiddlewareContext = {
    role: ProtocolRole;
    params: ProtocolParams.Uninstall;
    appInstance: AppInstanceJson;
    stateChannel: StateChannelJSON;
};
export declare type MiddlewareContext = SetupMiddlewareContext | ProposeMiddlewareContext | InstallMiddlewareContext | TakeActionMiddlewareContext | UninstallMiddlewareContext;
export declare type ValidationMiddleware = {
    (protocol: ProtocolName, context: MiddlewareContext): Promise<void>;
};
//# sourceMappingURL=middleware.d.ts.map