import { Address, BigNumber, PublicIdentifier } from "./basic";
export declare type Collateralizations = {
    [assetId: string]: boolean;
};
export declare type RebalanceProfile = {
    assetId: Address;
    collateralizeThreshold: BigNumber;
    target: BigNumber;
    reclaimThreshold: BigNumber;
};
export interface VerifyNonceDtoType {
    sig: string;
    userIdentifier: PublicIdentifier;
}
export declare type ChannelAppSequences = {
    userSequenceNumber: number;
    nodeSequenceNumber: number;
};
export declare type AllowedSwap = {
    from: Address;
    to: Address;
};
export declare const PriceOracleTypes: {
    UNISWAP: "UNISWAP";
    HARDCODED: "HARDCODED";
};
export declare type PriceOracleTypes = typeof PriceOracleTypes[keyof typeof PriceOracleTypes];
export declare type SwapRate = AllowedSwap & {
    rate: string;
    priceOracleType: PriceOracleTypes;
    blockNumber?: number;
};
//# sourceMappingURL=misc.d.ts.map