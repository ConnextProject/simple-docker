import { Address, BigNumber, Bytes32, DecString, Network, PublicIdentifier } from "./basic";
import { ConditionalTransactionCommitmentJSON, MinimalTransaction, SetStateCommitmentJSON } from "./commitments";
import { ContractAddresses } from "./contracts";
import { MethodResults } from "./methods";
import { PublicResults } from "./public";
import { StateChannelJSON } from "./state";
import { LinkedTransferStatus, HashLockTransferStatus, SignedTransferStatus } from "./transfers";
import { Collateralizations, RebalanceProfile } from "./misc";
declare type GetRebalanceProfileResponse = RebalanceProfile;
declare type GetHashLockTransferResponse = {
    senderIdentifier: PublicIdentifier;
    receiverIdentifier?: PublicIdentifier;
    assetId: Address;
    amount: DecString;
    lockHash: Bytes32;
    status: HashLockTransferStatus;
    meta?: any;
    preImage: Bytes32;
    expiry: BigNumber;
} | undefined;
declare type GetSignedTransferResponse = {
    senderIdentifier: PublicIdentifier;
    receiverIdentifier?: PublicIdentifier;
    assetId: Address;
    amount: DecString;
    paymentId: Bytes32;
    status: SignedTransferStatus;
    meta?: any;
};
declare type GetTransferResponse = {
    paymentId: Bytes32;
    amount: BigNumber;
    assetId: Address;
    senderIdentifier: PublicIdentifier;
    receiverIdentifier: PublicIdentifier;
    meta: any;
};
declare type GetConfigResponse = {
    ethNetwork: Network;
    contractAddresses: ContractAddresses;
    nodeIdentifier: PublicIdentifier;
    messagingUrl: string[];
    supportedTokenAddresses: Address[];
};
declare type GetChannelResponse = {
    nodeIdentifier: PublicIdentifier;
    userIdentifier: PublicIdentifier;
    multisigAddress: Address;
    available: boolean;
    activeCollateralizations: Collateralizations;
};
declare type CreateChannelResponse = {
    transactionHash: Bytes32;
};
declare type RequestCollateralResponse = MethodResults.Deposit | undefined;
declare type ChannelRestoreResponse = {
    channel: StateChannelJSON;
    setupCommitment: MinimalTransaction | undefined;
    setStateCommitments: [Bytes32, SetStateCommitmentJSON][];
    conditionalCommitments: [Bytes32, ConditionalTransactionCommitmentJSON][];
};
declare type FetchedLinkedTransfer = {
    paymentId: Bytes32;
    createdAt: Date;
    amount: BigNumber;
    assetId: Address;
    senderIdentifier: PublicIdentifier;
    receiverIdentifier?: PublicIdentifier;
    status: LinkedTransferStatus;
    meta: any;
    encryptedPreImage?: string;
};
declare type GetLinkedTransferResponse = FetchedLinkedTransfer;
declare type GetPendingAsyncTransfersResponse = FetchedLinkedTransfer[];
export declare namespace NodeResponses {
    type GetConfig = GetConfigResponse;
    type GetTransfer = GetTransferResponse;
    type GetTransferHistory = GetTransferResponse[];
    type GetLinkedTransfer = GetLinkedTransferResponse;
    type GetPendingAsyncTransfers = GetPendingAsyncTransfersResponse;
    type InstallConditionalTransferReceiverApp = PublicResults.ResolveCondition;
    type ResolveLinkedTransfer = PublicResults.ResolveLinkedTransfer;
    type ResolveSignedTransfer = PublicResults.ResolveSignedTransfer;
    type GetRebalanceProfile = GetRebalanceProfileResponse;
    type GetHashLockTransfer = GetHashLockTransferResponse;
    type GetSignedTransfer = GetSignedTransferResponse;
    type GetChannel = GetChannelResponse;
    type CreateChannel = CreateChannelResponse;
    type RequestCollateral = RequestCollateralResponse;
    type ChannelRestore = ChannelRestoreResponse;
}
export {};
//# sourceMappingURL=node.d.ts.map