import { AppABIEncodings, AppInstanceJson } from "./app";
import { Address, BigNumber, Bytes32, AssetId, PublicIdentifier, SolidityValueType } from "./basic";
import { OutcomeType } from "./contracts";
declare type InstallProtocolParams = {
    initiatorIdentifier: PublicIdentifier;
    responderIdentifier: PublicIdentifier;
    proposal: AppInstanceJson;
    multisigAddress: Address;
};
declare type ProposeProtocolParams = {
    multisigAddress: Address;
    initiatorIdentifier: PublicIdentifier;
    responderIdentifier: PublicIdentifier;
    appDefinition: Address;
    abiEncodings: AppABIEncodings;
    initiatorDeposit: BigNumber;
    initiatorDepositAssetId: AssetId;
    responderDeposit: BigNumber;
    responderDepositAssetId: AssetId;
    defaultTimeout: BigNumber;
    stateTimeout: BigNumber;
    initialState: SolidityValueType;
    outcomeType: OutcomeType;
    meta?: Object;
};
declare type SetupProtocolParams = {
    initiatorIdentifier: PublicIdentifier;
    responderIdentifier: PublicIdentifier;
    multisigAddress: Address;
};
declare type SyncProtocolParams = {
    initiatorIdentifier: PublicIdentifier;
    responderIdentifier: PublicIdentifier;
    multisigAddress: Address;
};
declare type TakeActionProtocolParams = {
    initiatorIdentifier: PublicIdentifier;
    responderIdentifier: PublicIdentifier;
    multisigAddress: Address;
    appIdentityHash: Address;
    action: SolidityValueType;
    stateTimeout: BigNumber;
};
declare type UninstallProtocolParams = {
    appIdentityHash: Bytes32;
    initiatorIdentifier: PublicIdentifier;
    responderIdentifier: PublicIdentifier;
    multisigAddress: Address;
    blockNumberToUseIfNecessary?: number;
    action?: SolidityValueType;
    stateTimeout?: BigNumber;
};
export declare enum Opcode {
    IO_SEND = 0,
    IO_SEND_AND_WAIT = 1,
    OP_SIGN = 2,
    PERSIST_APP_INSTANCE = 3,
    PERSIST_STATE_CHANNEL = 4,
    OP_VALIDATE = 5
}
export declare const ProtocolNames: {
    install: "install";
    propose: "propose";
    setup: "setup";
    sync: "sync";
    takeAction: "takeAction";
    uninstall: "uninstall";
};
export declare type ProtocolNames = typeof ProtocolNames[keyof typeof ProtocolNames];
export declare type ProtocolName = keyof typeof ProtocolNames;
export declare namespace ProtocolParams {
    type Install = InstallProtocolParams;
    type Propose = ProposeProtocolParams;
    type Setup = SetupProtocolParams;
    type Sync = SyncProtocolParams;
    type TakeAction = TakeActionProtocolParams;
    type Uninstall = UninstallProtocolParams;
}
export declare type ProtocolParam = InstallProtocolParams | ProposeProtocolParams | SetupProtocolParams | TakeActionProtocolParams | UninstallProtocolParams;
export {};
//# sourceMappingURL=protocol.d.ts.map