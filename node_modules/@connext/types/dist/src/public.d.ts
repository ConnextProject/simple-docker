import { providers, BigNumberish } from "ethers";
import { Address, BigNumber, Bytes32, HexString, PublicIdentifier, SignatureString } from "./basic";
import { ConditionalTransferTypes } from "./transfers";
import { MethodResults, MethodParams } from "./methods";
declare type DepositParameters = {
    amount: BigNumberish;
    assetId?: Address;
};
declare type DepositResponse = {
    freeBalance: {
        [s: string]: BigNumber;
    };
};
declare type CheckDepositRightsParameters = {
    assetId?: Address;
};
declare type CheckDepositRightsResponse = {
    appIdentityHash: Bytes32;
};
declare type RequestDepositRightsParameters = Omit<MethodParams.RequestDepositRights, "multisigAddress">;
declare type RequestDepositRightsResponse = MethodResults.RequestDepositRights;
declare type RescindDepositRightsParameters = Omit<MethodParams.RescindDepositRights, "multisigAddress">;
declare type RescindDepositRightsResponse = MethodResults.RescindDepositRights;
declare type HashLockTransferParameters = {
    conditionType: typeof ConditionalTransferTypes.HashLockTransfer;
    amount: BigNumberish;
    timelock?: BigNumberish;
    lockHash: Bytes32;
    recipient: PublicIdentifier;
    assetId?: Address;
    meta?: any;
};
declare type HashLockTransferResponse = {
    appIdentityHash: Bytes32;
};
declare type ResolveHashLockTransferParameters = {
    conditionType: typeof ConditionalTransferTypes.HashLockTransfer;
    assetId: Address;
    paymentId?: Bytes32;
    preImage: Bytes32;
};
declare type ResolveHashLockTransferResponse = {
    appIdentityHash: Bytes32;
    sender: PublicIdentifier;
    amount: BigNumber;
    assetId: Address;
    meta?: any;
};
declare type LinkedTransferParameters = {
    conditionType: typeof ConditionalTransferTypes.LinkedTransfer;
    amount: BigNumberish;
    assetId?: Address;
    paymentId: Bytes32;
    preImage: Bytes32;
    recipient?: PublicIdentifier;
    meta?: any;
};
declare type LinkedTransferResponse = {
    appIdentityHash: Bytes32;
    paymentId: Bytes32;
    preImage: Bytes32;
};
declare type ResolveLinkedTransferParameters = {
    conditionType: typeof ConditionalTransferTypes.LinkedTransfer;
    paymentId: Bytes32;
    preImage: Bytes32;
};
declare type ResolveLinkedTransferResponse = {
    appIdentityHash: Bytes32;
    sender: PublicIdentifier;
    paymentId: Bytes32;
    amount: BigNumber;
    assetId: Address;
    meta?: any;
};
declare type SignedTransferParameters = {
    conditionType: typeof ConditionalTransferTypes.SignedTransfer;
    amount: BigNumber;
    assetId: Address;
    paymentId: Bytes32;
    signerAddress: Address;
    chainId: number;
    verifyingContract: Address;
    requestCID: Bytes32;
    subgraphDeploymentID: Bytes32;
    recipient?: PublicIdentifier;
    meta?: any;
};
declare type SignedTransferResponse = {
    appIdentityHash: Bytes32;
    paymentId: Bytes32;
};
declare type ResolveSignedTransferParameters = {
    conditionType: typeof ConditionalTransferTypes.SignedTransfer;
    paymentId: Bytes32;
    responseCID: Bytes32;
    signature: SignatureString;
};
declare type ResolveSignedTransferResponse = {
    appIdentityHash: Bytes32;
    assetId: Address;
    amount: BigNumber;
    sender: PublicIdentifier;
    meta?: any;
};
declare type ConditionalTransferParameters = LinkedTransferParameters | HashLockTransferParameters | SignedTransferParameters;
declare type ConditionalTransferResponse = {
    amount: BigNumber;
    appIdentityHash: Bytes32;
    assetId: Address;
    paymentId: Bytes32;
    preImage?: Bytes32;
    sender: Address;
    recipient?: Address;
    meta: any;
    transferMeta: any;
};
declare type ResolveConditionParameters = ResolveHashLockTransferParameters | ResolveLinkedTransferParameters | ResolveSignedTransferParameters;
declare type ResolveConditionResponse = {
    appIdentityHash: Bytes32;
    assetId: Address;
    amount: BigNumber;
    paymentId: Bytes32;
    sender: PublicIdentifier;
    meta?: any;
};
declare type SwapParameters = {
    amount: BigNumberish;
    fromAssetId: Address;
    swapRate: string;
    toAssetId: Address;
};
declare type SwapResponse = {
    id: number;
    nodeIdentifier: PublicIdentifier;
    userIdentifier: PublicIdentifier;
    multisigAddress: Address;
    available: boolean;
    activeCollateralizations: {
        [assetId: string]: boolean;
    };
};
declare type WithdrawParameters = {
    amount: BigNumberish;
    assetId?: Address;
    recipient?: Address;
    nonce?: HexString;
};
declare type WithdrawResponse = {
    transaction: providers.TransactionResponse;
};
declare type TransferParameters = MethodParams.Deposit & {
    recipient: PublicIdentifier;
    meta?: any;
    paymentId?: Bytes32;
};
declare type TransferResponse = LinkedTransferResponse;
export declare namespace PublicParams {
    type CheckDepositRights = CheckDepositRightsParameters;
    type ConditionalTransfer = ConditionalTransferParameters;
    type Deposit = DepositParameters;
    type HashLockTransfer = HashLockTransferParameters;
    type LinkedTransfer = LinkedTransferParameters;
    type RequestDepositRights = RequestDepositRightsParameters;
    type RescindDepositRights = RescindDepositRightsParameters;
    type ResolveCondition = ResolveConditionParameters;
    type ResolveHashLockTransfer = ResolveHashLockTransferParameters;
    type ResolveLinkedTransfer = ResolveLinkedTransferParameters;
    type ResolveSignedTransfer = ResolveSignedTransferParameters;
    type SignedTransfer = SignedTransferParameters;
    type Swap = SwapParameters;
    type Transfer = TransferParameters;
    type Withdraw = WithdrawParameters;
}
export declare type PublicParam = CheckDepositRightsParameters | ConditionalTransferParameters | DepositParameters | HashLockTransferParameters | LinkedTransferParameters | RequestDepositRightsParameters | RescindDepositRightsParameters | ResolveConditionParameters | ResolveHashLockTransferParameters | ResolveLinkedTransferParameters | ResolveSignedTransferParameters | SignedTransferParameters | SwapParameters | TransferParameters | WithdrawParameters;
export declare namespace PublicResults {
    type CheckDepositRights = CheckDepositRightsResponse;
    type ConditionalTransfer = ConditionalTransferResponse;
    type Deposit = DepositResponse;
    type HashLockTransfer = HashLockTransferResponse;
    type LinkedTransfer = LinkedTransferResponse;
    type RequestDepositRights = RequestDepositRightsResponse;
    type RescindDepositRights = RescindDepositRightsResponse;
    type ResolveCondition = ResolveConditionResponse;
    type ResolveHashLockTransfer = ResolveHashLockTransferResponse;
    type ResolveLinkedTransfer = ResolveLinkedTransferResponse;
    type ResolveSignedTransfer = ResolveSignedTransferResponse;
    type SignedTransfer = SignedTransferResponse;
    type Swap = SwapResponse;
    type Transfer = TransferResponse;
    type Withdraw = WithdrawResponse;
}
export declare type PublicResult = CheckDepositRightsResponse | ConditionalTransferResponse | DepositResponse | HashLockTransferResponse | LinkedTransferResponse | RequestDepositRightsResponse | RescindDepositRightsResponse | ResolveConditionResponse | ResolveHashLockTransferResponse | ResolveLinkedTransferResponse | ResolveSignedTransferResponse | SignedTransferResponse | SwapResponse | TransferResponse | WithdrawResponse;
export {};
//# sourceMappingURL=public.d.ts.map