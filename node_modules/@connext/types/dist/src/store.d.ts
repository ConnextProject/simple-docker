import { AppInstanceJson } from "./app";
import { Address, Bytes32 } from "./basic";
import { ConditionalTransactionCommitmentJSON, MinimalTransaction, SetStateCommitmentJSON } from "./commitments";
import { StateChannelJSON } from "./state";
import { IWatcherStoreService } from "./watcher";
export declare const ConnextNodeStorePrefix = "INDRA_NODE_CF_CORE";
export declare const ConnextClientStorePrefix = "INDRA_CLIENT_CF_CORE";
export declare type StorePair = {
    path: string;
    value: any;
};
export interface IBackupService {
    restore(): Promise<StorePair[]>;
    backup(pair: StorePair): Promise<void>;
}
export declare type WithdrawalMonitorObject = {
    retry: number;
    tx: MinimalTransaction;
};
export declare const STORE_SCHEMA_VERSION = 1;
export interface IStoreService extends IWatcherStoreService {
    updateSchemaVersion(version?: number): Promise<void>;
    getUserWithdrawals(): Promise<WithdrawalMonitorObject[]>;
    saveUserWithdrawal(withdrawalObject: WithdrawalMonitorObject): Promise<void>;
    removeUserWithdrawal(toRemove: WithdrawalMonitorObject): Promise<void>;
    createStateChannel(stateChannel: StateChannelJSON, signedSetupCommitment: MinimalTransaction, signedFreeBalanceUpdate: SetStateCommitmentJSON): Promise<void>;
    incrementNumProposedApps(multisigAddress: string): Promise<void>;
    createAppInstance(multisigAddress: Address, appInstance: AppInstanceJson, freeBalanceAppInstance: AppInstanceJson, signedFreeBalanceUpdate: SetStateCommitmentJSON): Promise<void>;
    updateAppInstance(multisigAddress: Address, appInstance: AppInstanceJson, signedSetStateCommitment: SetStateCommitmentJSON): Promise<void>;
    removeAppInstance(multisigAddress: Address, appIdentityHash: Bytes32, freeBalanceAppInstance: AppInstanceJson, signedFreeBalanceUpdate: SetStateCommitmentJSON): Promise<void>;
    createAppProposal(multisigAddress: Address, appProposal: AppInstanceJson, numProposedApps: number, signedSetStateCommitment: SetStateCommitmentJSON, signedConditionalTxCommitment: ConditionalTransactionCommitmentJSON): Promise<void>;
    removeAppProposal(multisigAddress: Address, appIdentityHash: Bytes32): Promise<void>;
    clear(): Promise<void>;
    restore(): Promise<void>;
    init(): Promise<void>;
    close(): Promise<void>;
}
//# sourceMappingURL=store.d.ts.map