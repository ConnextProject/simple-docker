import { Sequelize } from "sequelize";
import { AppInstanceJson, AppInstanceProposal } from "./app";
import { Address, Bytes32 } from "./basic";
import { ConditionalTransactionCommitmentJSON, MinimalTransaction, SetStateCommitmentJSON } from "./commitments";
import { ILoggerService } from "./logger";
import { StateChannelJSON } from "./state";
import { IWatcherStoreService } from "./watcher";
export declare const ConnextNodeStorePrefix = "INDRA_NODE_CF_CORE";
export declare const ConnextClientStorePrefix = "INDRA_CLIENT_CF_CORE";
export declare const StoreTypes: {
    AsyncStorage: "AsyncStorage";
    File: "File";
    LocalStorage: "LocalStorage";
    Postgres: "Postgres";
    Memory: "Memory";
};
export declare type StoreTypes = typeof StoreTypes[keyof typeof StoreTypes];
export declare type StorePair = {
    path: string;
    value: any;
};
export declare type InitCallback = (data: AsyncStorageData) => void;
export interface AsyncStorageData {
    [key: string]: any;
}
export interface IAsyncStorage {
    getItem(key: string): Promise<string | null>;
    setItem(key: string, value: string): Promise<void>;
    removeItem(key: string): Promise<void>;
}
export interface FileStorageOptions {
    fileExt?: string;
    fileDir?: string;
}
export interface SequelizeStorageOptions {
    sequelize?: Sequelize | string;
    dbTableName?: string;
}
export interface StoreFactoryOptions extends FileStorageOptions, SequelizeStorageOptions {
    logger?: ILoggerService;
    storage?: IAsyncStorage | any;
    prefix?: string;
    separator?: string;
    asyncStorageKey?: string;
    backupService?: IBackupService;
}
export interface IBackupService {
    restore(): Promise<StorePair[]>;
    backup(pair: StorePair): Promise<void>;
}
export declare type WithdrawalMonitorObject = {
    retry: number;
    tx: MinimalTransaction;
};
export interface ChannelsMap {
    [multisigAddress: string]: any;
}
export declare const STORE_SCHEMA_VERSION = 1;
export interface IStoreService extends IWatcherStoreService {
    updateSchemaVersion(version?: number): Promise<void>;
    getUserWithdrawals(): Promise<WithdrawalMonitorObject[]>;
    saveUserWithdrawal(withdrawalObject: WithdrawalMonitorObject): Promise<void>;
    removeUserWithdrawal(toRemove: WithdrawalMonitorObject): Promise<void>;
    createStateChannel(stateChannel: StateChannelJSON, signedSetupCommitment: MinimalTransaction, signedFreeBalanceUpdate: SetStateCommitmentJSON): Promise<void>;
    createAppInstance(multisigAddress: Address, appInstance: AppInstanceJson, freeBalanceAppInstance: AppInstanceJson, signedFreeBalanceUpdate: SetStateCommitmentJSON, signedConditionalTxCommitment: ConditionalTransactionCommitmentJSON): Promise<void>;
    updateAppInstance(multisigAddress: Address, appInstance: AppInstanceJson, signedSetStateCommitment: SetStateCommitmentJSON): Promise<void>;
    removeAppInstance(multisigAddress: Address, appIdentityHash: Bytes32, freeBalanceAppInstance: AppInstanceJson, signedFreeBalanceUpdate: SetStateCommitmentJSON): Promise<void>;
    createAppProposal(multisigAddress: Address, appProposal: AppInstanceProposal, numProposedApps: number, signedSetStateCommitment: SetStateCommitmentJSON): Promise<void>;
    removeAppProposal(multisigAddress: Address, appIdentityHash: Bytes32): Promise<void>;
    clear(): Promise<void>;
    restore(): Promise<void>;
    init(): Promise<void>;
    close(): Promise<void>;
}
//# sourceMappingURL=store.d.ts.map