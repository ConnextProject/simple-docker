import { Address, BigNumber, Bytes32 } from "./basic";
export declare const ConditionalTransferTypes: {
    HashLockTransfer: "HashLockTransfer";
    LinkedTransfer: "LinkedTransfer";
    SignedTransfer: "SignedTransfer";
};
export declare type ConditionalTransferTypes = (typeof ConditionalTransferTypes)[keyof typeof ConditionalTransferTypes];
export declare type CreatedLinkedTransferMeta = {
    encryptedPreImage?: string;
};
export declare type CreatedHashLockTransferMeta = {
    lockHash: Bytes32;
    timelock?: BigNumber;
    expiry: BigNumber;
};
export declare type CreatedSignedTransferMeta = {
    signer: Address;
};
export declare type UnlockedLinkedTransferMeta = {
    preImage: string;
};
export declare type UnlockedHashLockTransferMeta = {
    lockHash: Bytes32;
    preImage: Bytes32;
};
export declare type UnlockedSignedTransferMeta = {};
export declare const LinkedTransferStatus: {
    PENDING: "PENDING";
    COMPLETED: "COMPLETED";
    FAILED: "FAILED";
};
export declare type LinkedTransferStatus = (typeof LinkedTransferStatus)[keyof typeof LinkedTransferStatus];
export declare const HashLockTransferStatus: {
    PENDING: "PENDING";
    EXPIRED: "EXPIRED";
    COMPLETED: "COMPLETED";
    FAILED: "FAILED";
};
export declare type HashLockTransferStatus = (typeof HashLockTransferStatus)[keyof typeof HashLockTransferStatus];
export declare const SignedTransferStatus: {
    PENDING: "PENDING";
    COMPLETED: "COMPLETED";
    FAILED: "FAILED";
};
export declare type SignedTransferStatus = (typeof SignedTransferStatus)[keyof typeof SignedTransferStatus];
export declare type TransferAction = {
    finalize: boolean;
    transferAmount: BigNumber;
};
//# sourceMappingURL=transfers.d.ts.map