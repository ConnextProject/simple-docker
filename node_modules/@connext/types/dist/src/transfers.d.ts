import { Address, BigNumber, Bytes32, SignatureString } from "./basic";
import { HashLockTransferAppName, SimpleLinkedTransferAppName, SimpleSignedTransferAppName, SupportedApplicationNames, GenericConditionalTransferAppName } from "./contracts";
export declare type TransferType = "RequireOnline" | "AllowOffline";
export declare const getTransferTypeFromAppName: (name: SupportedApplicationNames) => TransferType | undefined;
export declare const ConditionalTransferTypes: {
    HashLockTransfer: "HashLockTransferApp";
    LinkedTransfer: "SimpleLinkedTransferApp";
    SignedTransfer: "SimpleSignedTransferApp";
};
export declare type ConditionalTransferTypes = typeof ConditionalTransferTypes[keyof typeof ConditionalTransferTypes];
export declare const ConditionalTransferAppNames: {
    HashLockTransferApp: "HashLockTransferApp";
    SimpleLinkedTransferApp: "SimpleLinkedTransferApp";
    SimpleSignedTransferApp: "SimpleSignedTransferApp";
    GenericConditionalTransferApp: "GenericConditionalTransferApp";
};
export declare type ConditionalTransferAppNames = typeof ConditionalTransferAppNames[keyof typeof ConditionalTransferAppNames];
export interface CreatedConditionalTransferMetaMap {
    [ConditionalTransferTypes.HashLockTransfer]: CreatedHashLockTransferMeta;
    [ConditionalTransferTypes.SignedTransfer]: CreatedSignedTransferMeta;
    [ConditionalTransferTypes.LinkedTransfer]: CreatedLinkedTransferMeta;
}
export declare type CreatedConditionalTransferMeta = {
    [P in keyof CreatedConditionalTransferMetaMap]: CreatedConditionalTransferMetaMap[P];
};
export interface UnlockedConditionalTransferMetaMap {
    [ConditionalTransferTypes.HashLockTransfer]: UnlockedHashLockTransferMeta;
    [ConditionalTransferTypes.SignedTransfer]: UnlockedSignedTransferMeta;
    [ConditionalTransferTypes.LinkedTransfer]: UnlockedLinkedTransferMeta;
}
export declare type UnlockedConditionalTransferMeta = {
    [P in keyof UnlockedConditionalTransferMetaMap]: UnlockedConditionalTransferMetaMap[P];
};
export declare type CreatedLinkedTransferMeta = {
    encryptedPreImage?: string;
};
export declare type CreatedHashLockTransferMeta = {
    lockHash: Bytes32;
    timelock?: BigNumber;
    expiry: BigNumber;
};
export declare type CreatedSignedTransferMeta = {
    signerAddress: Address;
    chainId: number;
    verifyingContract: Address;
    requestCID: Bytes32;
    subgraphDeploymentID: Bytes32;
};
export declare type UnlockedLinkedTransferMeta = {
    preImage: string;
};
export declare type UnlockedHashLockTransferMeta = {
    lockHash: Bytes32;
    preImage: Bytes32;
};
export declare type UnlockedSignedTransferMeta = {
    responseCID: Bytes32;
    signature: SignatureString;
};
export declare const LinkedTransferStatus: {
    PENDING: "PENDING";
    COMPLETED: "COMPLETED";
    FAILED: "FAILED";
};
export declare type LinkedTransferStatus = typeof LinkedTransferStatus[keyof typeof LinkedTransferStatus];
export declare const HashLockTransferStatus: {
    PENDING: "PENDING";
    EXPIRED: "EXPIRED";
    COMPLETED: "COMPLETED";
    FAILED: "FAILED";
};
export declare type HashLockTransferStatus = typeof HashLockTransferStatus[keyof typeof HashLockTransferStatus];
export declare const SignedTransferStatus: {
    PENDING: "PENDING";
    COMPLETED: "COMPLETED";
    FAILED: "FAILED";
};
export declare type SignedTransferStatus = typeof SignedTransferStatus[keyof typeof SignedTransferStatus];
export declare type TransferAction = {
    finalize: boolean;
    transferAmount: BigNumber;
};
//# sourceMappingURL=transfers.d.ts.map