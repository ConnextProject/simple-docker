import { Address, HexString, IChannelSigner, PrivateKey, PublicKey, PublicIdentifier, SignatureString, UrlString } from "@connext/types";
import { TransactionResponse, TransactionRequest, JsonRpcProvider } from "ethers/providers";
export declare const getRandomChannelSigner: (ethProviderUrl?: string) => ChannelSigner;
export declare class ChannelSigner implements IChannelSigner {
    private readonly privateKey;
    address: Address;
    publicIdentifier: PublicIdentifier;
    publicKey: PublicKey;
    readonly provider?: JsonRpcProvider;
    private readonly _ethersType;
    constructor(privateKey: PrivateKey, ethProviderUrl?: UrlString);
    getAddress(): Promise<Address>;
    encrypt: (message: string, publicKey: string) => Promise<string>;
    decrypt(message: string): Promise<HexString>;
    signMessage(message: string): Promise<SignatureString>;
    sendTransaction(transaction: TransactionRequest): Promise<TransactionResponse>;
}
//# sourceMappingURL=channelSigner.d.ts.map