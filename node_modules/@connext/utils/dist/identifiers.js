"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bs58check_1 = __importDefault(require("bs58check"));
const utils_1 = require("ethers/utils");
const eccrypto_js_1 = require("eccrypto-js");
const hexStrings_1 = require("./hexStrings");
const crypto_1 = require("./crypto");
exports.INDRA_PUB_ID_PREFIX = "indra";
exports.getPublicIdentifierFromPublicKey = (publicKey) => exports.INDRA_PUB_ID_PREFIX + bs58check_1.default.encode(eccrypto_js_1.compress(eccrypto_js_1.hexToBuffer(publicKey)));
exports.getPublicKeyFromPublicIdentifier = (publicIdentifier) => `0x${eccrypto_js_1.bufferToHex(eccrypto_js_1.decompress(bs58check_1.default.decode(publicIdentifier.replace(exports.INDRA_PUB_ID_PREFIX, ""))))}`;
exports.getSignerAddressFromPublicIdentifier = (publicIdentifier) => crypto_1.getAddressFromPublicKey(exports.getPublicKeyFromPublicIdentifier(publicIdentifier));
exports.getAddressFromAssetId = (assetId) => utils_1.getAddress(assetId);
exports.getPublicIdentifierError = (value) => {
    try {
        if (typeof value !== "string") {
            return `Invalid public identifier. Expected a string, got ${typeof value}`;
        }
        else if (!value.startsWith(exports.INDRA_PUB_ID_PREFIX)) {
            return `Invalid public identifier. Expected ${value} to start with ${exports.INDRA_PUB_ID_PREFIX}`;
        }
        const addressError = hexStrings_1.getAddressError(exports.getSignerAddressFromPublicIdentifier(value));
        return addressError
            ? `Invalid public identifier. Got errors recovering address from ${value}: ${addressError}`
            : undefined;
    }
    catch (e) {
        return e.message;
    }
};
exports.isValidPublicIdentifier = (value) => !exports.getPublicIdentifierError(value);
//# sourceMappingURL=identifiers.js.map