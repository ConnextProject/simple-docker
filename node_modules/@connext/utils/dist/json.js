"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeJsonParse = exports.safeJsonStringify = exports.stringify = exports.deBigNumberifyJson = exports.bigNumberifyJson = void 0;
const ethers_1 = require("ethers");
const bigNumbers_1 = require("./bigNumbers");
const strings_1 = require("./strings");
function bigNumberifyJson(json) {
    return typeof json === "string"
        ? json
        : JSON.parse(JSON.stringify(json), (key, value) => value && value._hex ? bigNumbers_1.toBN(value._hex) : value);
}
exports.bigNumberifyJson = bigNumberifyJson;
function deBigNumberifyJson(json) {
    return JSON.parse(JSON.stringify(json), (key, value) => value && bigNumbers_1.isBN(value) && value.toHexString ? value.toHexString() : value);
}
exports.deBigNumberifyJson = deBigNumberifyJson;
exports.stringify = (value, abrv = false, spaces = 2) => JSON.stringify(value, (key, value) => value && value._hex
    ? ethers_1.BigNumber.from(value).toString()
    : abrv && value && typeof value === "string" && value.startsWith("indra")
        ? strings_1.abbreviate(value, 5)
        : abrv && value && typeof value === "string" && value.startsWith("0x") && value.length > 12
            ? strings_1.abbreviate(value)
            : value, spaces);
const nullify = (key, value) => (typeof value === "undefined" ? null : value);
exports.safeJsonStringify = (value) => {
    try {
        return typeof value === "string" ? value : JSON.stringify(value, nullify);
    }
    catch (e) {
        console.log(`Failed to safeJsonstringify value ${value}: ${e.message}`);
        return value;
    }
};
function safeJsonParse(value) {
    try {
        return typeof value === "string" ? JSON.parse(value, nullify) : value;
    }
    catch (e) {
        console.log(`Failed to safeJsonParse value ${value}: ${e.message}`);
        return value;
    }
}
exports.safeJsonParse = safeJsonParse;
//# sourceMappingURL=json.js.map