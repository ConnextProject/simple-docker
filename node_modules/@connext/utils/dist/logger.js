"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColorfulLogger = exports.ConsoleLogger = exports.nullLogger = exports.logTime = void 0;
exports.logTime = (log, start, msg) => {
    const diff = Date.now() - start;
    const message = `${msg} in ${diff} ms`;
    if (diff < 20) {
        log.debug(message);
    }
    else if (diff < 200) {
        log.info(message);
    }
    else {
        log.warn(message);
    }
};
exports.nullLogger = {
    debug: (msg) => { },
    info: (msg) => { },
    warn: (msg) => { },
    error: (msg) => { },
    setContext: (context) => { },
    newContext: function (context) {
        return this;
    },
};
class ConsoleLogger {
    constructor(context, level, log) {
        this.levels = { debug: 4, error: 1, info: 3, warn: 2 };
        this.context = "UnknownContext";
        this.log = console;
        this.level = 3;
        this.context = typeof context !== "undefined" ? context : this.context;
        this.level = typeof level !== "undefined" ? parseInt(level.toString(), 10) : this.level;
        this.log = typeof log !== "undefined" ? log : this.log;
    }
    setContext(context) {
        this.context = context;
    }
    newContext(context) {
        return new ConsoleLogger(context, this.level);
    }
    error(msg) {
        this.print("error", msg);
    }
    warn(msg) {
        this.print("warn", msg);
    }
    info(msg) {
        this.print("info", msg);
    }
    debug(msg) {
        this.print("debug", msg);
    }
    print(level, msg) {
        if (this.levels[level] > this.level)
            return;
        this.log[level](`${new Date().toISOString()} [${this.context}] ${msg}`);
    }
}
exports.ConsoleLogger = ConsoleLogger;
const colors = {
    Reset: "\x1b[0m",
    Bright: "\x1b[1m",
    Dim: "\x1b[2m",
    Underscore: "\x1b[4m",
    Blink: "\x1b[5m",
    Reverse: "\x1b[7m",
    Hidden: "\x1b[8m",
    FgBlack: "\x1b[30m",
    FgRed: "\x1b[31m",
    FgGreen: "\x1b[32m",
    FgYellow: "\x1b[33m",
    FgBlue: "\x1b[34m",
    FgMagenta: "\x1b[35m",
    FgCyan: "\x1b[36m",
    FgWhite: "\x1b[37m",
    BgBlack: "\x1b[40m",
    BgRed: "\x1b[41m",
    BgGreen: "\x1b[42m",
    BgYellow: "\x1b[43m",
    BgBlue: "\x1b[44m",
    BgMagenta: "\x1b[45m",
    BgCyan: "\x1b[46m",
    BgWhite: "\x1b[47m",
};
class ColorfulLogger {
    constructor(context, level, color, id) {
        this.color = true;
        this.colors = {
            context: colors.FgCyan,
            debug: colors.FgMagenta,
            error: colors.FgRed,
            info: colors.FgGreen,
            warn: colors.FgYellow,
            reset: colors.Reset,
        };
        this.context = "UnknownContext";
        this.level = 3;
        this.levels = { debug: 4, error: 1, info: 3, warn: 2 };
        this.id = "?";
        this.context = typeof context !== "undefined" ? context : this.context;
        this.level = typeof level !== "undefined" ? parseInt(level.toString(), 10) : this.level;
        this.color = color || false;
        this.id = id ? id.toString() : "?";
        if (!this.color) {
            this.colors = { context: "", debug: "", error: "", info: "", warn: "", reset: "" };
        }
    }
    setContext(context) {
        this.context = context;
    }
    newContext(context) {
        return new ColorfulLogger(context, this.level, this.color, this.id);
    }
    error(msg) {
        this.print("error", msg);
    }
    warn(msg) {
        this.print("warn", msg);
    }
    info(msg) {
        this.print("info", msg);
    }
    debug(msg) {
        this.print("debug", msg);
    }
    print(level, msg) {
        if (this.levels[level] > this.level)
            return;
        const now = new Date().toISOString();
        console[level](`${now} ${this.colors[level]}${level.substring(0, 1).toUpperCase()} ` +
            `${this.colors.context}[${this.id}][${this.context}] ` +
            `${this.colors[level]}${msg}${this.colors.reset}`);
    }
}
exports.ColorfulLogger = ColorfulLogger;
//# sourceMappingURL=logger.js.map