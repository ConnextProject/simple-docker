"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateExchange = exports.inverse = exports.minBN = exports.maxBN = exports.tokenToWei = exports.weiToToken = exports.fromWad = exports.toWad = void 0;
const ethers_1 = require("ethers");
const bigNumbers_1 = require("./bigNumbers");
const { Zero, MaxUint256 } = ethers_1.constants;
const { parseEther, formatEther } = ethers_1.utils;
exports.toWad = (n) => parseEther(n.toString());
exports.fromWad = formatEther;
exports.weiToToken = (wei, tokenPerEth) => bigNumbers_1.toBN(formatEther(exports.toWad(tokenPerEth).mul(wei)).replace(/\.[0-9]*$/, ``));
exports.tokenToWei = (token, tokenPerEth) => exports.toWad(token).div(exports.toWad(tokenPerEth));
exports.maxBN = (lobn) => lobn.reduce((max, current) => (max.gt(current) ? max : current), Zero);
exports.minBN = (lobn) => lobn.reduce((min, current) => (min.lt(current) ? min : current), MaxUint256);
exports.inverse = (bn) => formatEther(exports.toWad(exports.toWad(`1`)).div(exports.toWad(bn)));
exports.calculateExchange = (amount, swapRate) => {
    const [integer, fractional] = swapRate.split(".");
    const safeSwapRate = [integer, (fractional || "0").substring(0, 18)].join(".");
    return ethers_1.BigNumber.from(formatEther(amount.mul(parseEther(safeSwapRate))).replace(/\.[0-9]*$/, ""));
};
//# sourceMappingURL=math.js.map