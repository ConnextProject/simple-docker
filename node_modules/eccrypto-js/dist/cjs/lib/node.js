"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../helpers/constants");
const util_1 = require("../helpers/util");
const nodeCrypto = require('crypto');
function isNode() {
    return !!nodeCrypto;
}
exports.isNode = isNode;
function nodeRandomBytes(length) {
    return nodeCrypto.randomBytes(length);
}
exports.nodeRandomBytes = nodeRandomBytes;
function nodeAesEncrypt(iv, key, data) {
    return __awaiter(this, void 0, void 0, function* () {
        const cipher = nodeCrypto.createCipheriv(constants_1.AES_NODE_ALGO, key, iv);
        return util_1.concatBuffers(cipher.update(data), cipher.final());
    });
}
exports.nodeAesEncrypt = nodeAesEncrypt;
function nodeAesDecrypt(iv, key, data) {
    return __awaiter(this, void 0, void 0, function* () {
        const decipher = nodeCrypto.createDecipheriv(constants_1.AES_NODE_ALGO, key, iv);
        return util_1.concatBuffers(decipher.update(data), decipher.final());
    });
}
exports.nodeAesDecrypt = nodeAesDecrypt;
function nodeCreateHmac(key, data) {
    return __awaiter(this, void 0, void 0, function* () {
        const hmac = nodeCrypto.createHmac(constants_1.HMAC_NODE_ALGO, Buffer.from(key));
        return hmac.update(data).digest();
    });
}
exports.nodeCreateHmac = nodeCreateHmac;
function nodeSha256(data) {
    return __awaiter(this, void 0, void 0, function* () {
        const hash = nodeCrypto.createHash(constants_1.SHA256_NODE_ALGO);
        return hash.update(data).digest();
    });
}
exports.nodeSha256 = nodeSha256;
function nodeSha512(data) {
    return __awaiter(this, void 0, void 0, function* () {
        const hash = nodeCrypto.createHash(constants_1.SHA512_NODE_ALGO);
        return hash.update(data).digest();
    });
}
exports.nodeSha512 = nodeSha512;
//# sourceMappingURL=node.js.map